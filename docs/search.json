[
  {
    "objectID": "starter-analysis-exercise/data/readme.html",
    "href": "starter-analysis-exercise/data/readme.html",
    "title": "EMMA HARDIN-PARKER: DATA ANALYSIS PORTFOLIO",
    "section": "",
    "text": "The folders inside this folder should contain all data at various stages.\nThis data is being loaded/manipulated/changed/saved with code from the code folders.\nYou should place the raw data in the raw_data folder and not edit it. Ever!\nIdeally, load the raw data into R and do all changes there with code, so everything is automatically reproducible and documented.\nSometimes, you need to edit the files in the format you got. For instance, Excel files are sometimes so poorly formatted that it’s close to impossible to read them into R, or the persons you got the data from used color to code some information, which of course won’t import into R. In those cases, you might have to make modifications in a software other than R. If you need to make edits in whatever format you got the data (e.g. Excel), make a copy and place those copies in a separate folder, AND ONLY EDIT THOSE COPIES. Also, write down somewhere the edits you made.\nAdd as many sub-folders as suitable. If you only have a single processing step, one sub-folder for processed data is enough. If you have multiple stages of cleaning and processing, additional sub-folders might be useful. Adjust based on the complexity of your project.\nI suggest you save your processed and cleaned data as RDS or RDA/Rdata files. This preserves coding like factors, characters, numeric, etc. If you save as CSV, that information would get lost. However, CSV is better for sharing with others since it’s plain text. If you do CSV, you might want to write down somewhere what each variable is.\nSee here for some suggestions on how to store your processed data:\nhttp://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata"
  },
  {
    "objectID": "starter-analysis-exercise/results/figures/readme.html",
    "href": "starter-analysis-exercise/results/figures/readme.html",
    "title": "EMMA HARDIN-PARKER: DATA ANALYSIS PORTFOLIO",
    "section": "",
    "text": "Folder for all figures.\nYou can create further sub-folders if that makes sense."
  },
  {
    "objectID": "starter-analysis-exercise/results/tables-files/readme.html",
    "href": "starter-analysis-exercise/results/tables-files/readme.html",
    "title": "EMMA HARDIN-PARKER: DATA ANALYSIS PORTFOLIO",
    "section": "",
    "text": "Folder for all tables (generally stored as Rds files) and other files.\nYou can create further sub-folders if that makes sense."
  },
  {
    "objectID": "starter-analysis-exercise/code/processing-code/readme.html",
    "href": "starter-analysis-exercise/code/processing-code/readme.html",
    "title": "EMMA HARDIN-PARKER: DATA ANALYSIS PORTFOLIO",
    "section": "",
    "text": "This folder contains code for processing data.\nCurrently, there is just a single Quarto file to illustrate how the processing can look like.\nInstead of a Quarto file that contains code, it is also possible to use R scripts or a combination of R scripts and Quarto code. Those approaches are illustrated in the full dataanalysis-template repository."
  },
  {
    "objectID": "starter-analysis-exercise/code/eda-code/readme.html",
    "href": "starter-analysis-exercise/code/eda-code/readme.html",
    "title": "EMMA HARDIN-PARKER: DATA ANALYSIS PORTFOLIO",
    "section": "",
    "text": "This folder contains code to do some simple exploratory data analysis (EDA) on the processed/cleaned data. The code produces a few tables and figures, which are saved in the appropriate results sub-folder."
  },
  {
    "objectID": "starter-analysis-exercise/code/eda-code/eda2.html",
    "href": "starter-analysis-exercise/code/eda-code/eda2.html",
    "title": "An example exploratory analysis script",
    "section": "",
    "text": "This Quarto file loads the cleaned data and does some exploring.\nI’m only showing it the way where the code is included in the file. As described in the processing_code materials, I currently prefer the approach of having R code in a separate file and pulling it in.\nBut I already had this written and haven’t yet re-done it that way. Feel free to redo and send a pull request on GitHub :)\nAgain, it is largely a matter of preference and what makes the most sense to decide if one wants to have code inside Quarto files, or as separate R files. And sometimes, an R script with enough comments is good enough and one doesn’t need a Quarto file.\nAlso note that while here I split cleaning and exploring, this is iterative. You saw that as part of the processing, we already had to explore the data somewhat to understand how to clean it. In general, as you explore, you’ll find things that need cleaning. As you clean, you can explore more. Therefore, at times it might make more sense to combine the cleaning and exploring code parts into a single R or Quarto file. Or split things in any other logical way.\nAs part of the exploratory analysis, you should produce plots or tables or other summary quantities for the most interesting/important quantities in your data. Depending on the total number of variables in your dataset, explore all or some of the others. Figures produced here might be histograms or density plots, correlation plots, etc. Tables might summarize your data.\nStart by exploring one variable at a time. Then continue by creating plots or tables of the outcome(s) of interest and the predictor/exposure/input variables you are most interested in. If your dataset is small, you can do that for all variables.\nPlots produced here can be scatterplots, boxplots, violinplots, etc. Tables can be simple 2x2 tables or larger ones.\n\nSetup\n\n#load needed packages. make sure they are installed.\nlibrary(here) #for data loading/saving\n\nhere() starts at /Users/ehardinparker/Desktop/Completed/CPH_Spring24/BIOS8060E/emmahardinparker-MADA-portfolio\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(skimr)\nlibrary(ggplot2)\n\nLoad the data.\n\n#Path to data. Note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata2.rds\")\n#load data\nmydata &lt;- readRDS(data_location)\n\n\n\nData exploration through tables\nShowing a bit of code to produce and save a summary table.\n\nsummary_df = skimr::skim(mydata)\nprint(summary_df)\n\n── Data Summary ────────────────────────\n                           Values\nName                       mydata\nNumber of rows             9     \nNumber of columns          5     \n_______________________          \nColumn type frequency:           \n  factor                   2     \n  numeric                  3     \n________________________         \nGroup variables            None  \n\n── Variable type: factor ───────────────────────────────────────────────────────\n  skim_variable  n_missing complete_rate ordered n_unique top_counts      \n1 Gender                 0         1     FALSE          3 M: 4, F: 3, O: 2\n2 Smoking_Status         2         0.778 FALSE          2 Yes: 5, No: 2   \n\n── Variable type: numeric ──────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate  mean   sd  p0 p25 p50 p75 p100 hist \n1 Height                0             1 166.  16.0 133 156 166 178  183 ▂▁▃▃▇\n2 Weight                0             1  70.1 21.2  45  55  70  80  110 ▇▂▃▂▂\n3 Age                   0             1  39   15.3  22  28  32  51   64 ▇▂▂▂▃\n\n# save to file\nsummarytable_file = here(\"starter-analysis-exercise\",\"results\", \"tables-files\", \"summarytable.rds\")\nsaveRDS(summary_df, file = summarytable_file)\n\nWe are saving the results to the results/tables folder. Structure the folders inside results such that they make sense for your specific analysis. Provide enough documentation that someone can understand what you are doing and what goes where. readme.md files inside each folder are a good idea.\n\n\nData exploration through figures\nHistogram plots for the continuous outcomes.\nHeight first.\n\np1 &lt;- mydata %&gt;% ggplot(aes(x=Height)) + geom_histogram() \nplot(p1)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-distribution.png\")\nggsave(filename = figure_file, plot=p1) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow weights.\n\np2 &lt;- mydata %&gt;% ggplot(aes(x=Weight)) + geom_histogram() \nplot(p2)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"weight-distribution.png\")\nggsave(filename = figure_file, plot=p2) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow height as function of weight.\n\np3 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight)) + geom_point() + geom_smooth(method='lm')\nplot(p3)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight.png\")\nggsave(filename = figure_file, plot=p3) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nOnce more height as function of weight, stratified by gender. Note that there is so little data, it’s a bit silly. But we’ll plot it anyway.\n\np4 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight, color = Gender)) + geom_point() + geom_smooth(method='lm')\nplot(p4)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\n\n\nWarning in max(ids, na.rm = TRUE): no non-missing arguments to max; returning\n-Inf\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight-stratified.png\")\nggsave(filename = figure_file, plot=p4) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\nWarning in qt((1 - level)/2, df): no non-missing arguments to max; returning\n-Inf\n\n\nNow we’ll plot height stratified by smoking status. We’ll use a boxplot because the instructions said to although with 9 points across 3 strata this plot is misleading and useless.\n\np5 &lt;- mydata |&gt;\n  ggplot2::ggplot() +\n  ggplot2::aes(x = Smoking_Status, y = Height) +\n  ggplot2::geom_boxplot()\n\nplot(p5)\n\n\n\n\n\n\n\nfigure_file = here::here(\n  \"starter-analysis-exercise\",\n  \"results\",\n  \"figures\",\n  \"height-smoking-stratified.png\"\n)\nggplot2::ggsave(filename = figure_file, plot = p5) \n\nSaving 7 x 5 in image\n\n\nFinally we’ll plot height vs. age, with a scatterplot.\n\np6 &lt;- mydata |&gt;\n  ggplot2::ggplot() +\n  ggplot2::aes(x = Age, y = Height) +\n  ggplot2::geom_point()\n\nplot(p6)\n\n\n\n\n\n\n\nfigure_file = here::here(\n  \"starter-analysis-exercise\",\n  \"results\",\n  \"figures\",\n  \"height-age-stratified.png\"\n)\nggplot2::ggsave(filename = figure_file, plot = p6) \n\nSaving 7 x 5 in image\n\n\n\n\nNotes\nFor your own explorations, tables and figures can be “quick and dirty”. As long as you can see what’s going on, there is no need to polish them. That’s in contrast to figures you’ll produce for your final products (paper, report, presentation, website, etc.). Those should look as nice, polished and easy to understand as possible."
  },
  {
    "objectID": "starter-analysis-exercise/code/analysis-code/readme.html",
    "href": "starter-analysis-exercise/code/analysis-code/readme.html",
    "title": "EMMA HARDIN-PARKER: DATA ANALYSIS PORTFOLIO",
    "section": "",
    "text": "This folder contains code to do some simple exploratory analysis and statistical analysis on the processed/cleaned data. The code produces a few tables and figures, which are saved in the results folder.\nIt’s the same code done 3 times:\n\nFirst, there is an R script that you can run which does all the computations.\nSecond, there is a Quarto file which contains exactly the same code as the R script.\nThird, my current favorite, is a Quarto file with an approach where the code is pulled in from the R script and run.\n\nThe last version has the advantage of having code in one place for easy writing/debugging, and then being able to pull the code into the Quarto file for a nice combination of text/commentary and code.\nEach way of doing this is a reasonable approach, pick whichever one you prefer or makes the most sense for your setup. Whichever approach you choose, add ample documentation/commentary so you and others can easily understand what’s going on and what is done."
  },
  {
    "objectID": "starter-analysis-exercise/products/readme.html",
    "href": "starter-analysis-exercise/products/readme.html",
    "title": "EMMA HARDIN-PARKER: DATA ANALYSIS PORTFOLIO",
    "section": "",
    "text": "The folders inside this folder should contain all the products of your project.\nFor a classical academic project, this will be a peer-reviewed manuscript, and should be placed into a manuscript folder.\nFor our case, since we’ll want to put it on the website, we call it a report.\nOften you need a library of references in bibtex format, as well as a CSL style file that determines reference formatting. Since those files might be used by several of the products, I’m placing them in the main products folder. Feel free to re-organize."
  },
  {
    "objectID": "presentation-exercise/presentation-exercise2.html",
    "href": "presentation-exercise/presentation-exercise2.html",
    "title": "Presentation Exercise",
    "section": "",
    "text": "Library Packages\n\nlibrary(tidymodels)\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.2.0 ──\n\n\n✔ broom        1.0.6     ✔ recipes      1.1.0\n✔ dials        1.3.0     ✔ rsample      1.2.1\n✔ dplyr        1.1.4     ✔ tibble       3.2.1\n✔ ggplot2      3.5.1     ✔ tidyr        1.3.1\n✔ infer        1.0.7     ✔ tune         1.2.1\n✔ modeldata    1.4.0     ✔ workflows    1.1.4\n✔ parsnip      1.2.1     ✔ workflowsets 1.1.0\n✔ purrr        1.0.2     ✔ yardstick    1.3.1\n\n\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ purrr::discard() masks scales::discard()\n✖ dplyr::filter()  masks stats::filter()\n✖ dplyr::lag()     masks stats::lag()\n✖ recipes::step()  masks stats::step()\n• Dig deeper into tidy modeling with R at https://www.tmwr.org\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats   1.0.0     ✔ readr     2.1.5\n✔ lubridate 1.9.3     ✔ stringr   1.5.1\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ readr::col_factor() masks scales::col_factor()\n✖ purrr::discard()    masks scales::discard()\n✖ dplyr::filter()     masks stats::filter()\n✖ stringr::fixed()    masks recipes::fixed()\n✖ dplyr::lag()        masks stats::lag()\n✖ readr::spec()       masks yardstick::spec()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggplot2)\nlibrary(plotly)\n\n\nAttaching package: 'plotly'\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\nThe following object is masked from 'package:stats':\n\n    filter\n\nThe following object is masked from 'package:graphics':\n\n    layout\n\nlibrary(knitr)\nlibrary(kableExtra)\n\n\nAttaching package: 'kableExtra'\n\nThe following object is masked from 'package:dplyr':\n\n    group_rows\n\nlibrary(gt)\n\n\n\nBackground\nThe data were acquired from Kaggle. Two data sets were included; one containing data on dietary habits of study participants, and the other contains data that spuriously connect demographic characteristics or lifestyle habits to food choices. The latter dataset, titled p_values clearly demonstrates the problem with using p-values to solely dictate statistical significance. For example, the article suggests, with a p-value of 0.0001 that eating potato chips is linked to higher SAT scores on the math section than the verbal section.\nFor this assignment, my goal is to use AI to replicate the figures and tables from this article. Prompts and code provided by AI (Chat GPT) will be included within the visualization-exercise.qmd document.\nHere is the figure I am going to recreate \n\n\nImporting Dataset\n\np_values &lt;- read.csv(\"~/Desktop/Completed/CPH_Spring24/BIOS8060E/emmahardinparker-MADA-portfolio/presentation-exercise/p_values_analysis.csv\") \n\n\n\nP-Value table\nBefore I can begin recreating the spurious connection table, I need to both explore the data and make some transformations.\n\nstr(p_values)\n\n'data.frame':   27716 obs. of  3 variables:\n $ food          : chr  \"GROUP_COOK_FAT_ANIMAL_FAT_TOTAL_GRAMS\" \"COOKINGFATLARD\" \"MILKONCEREALQUAN\" \"SOMEJUICEQUAN\" ...\n $ characteristic: chr  \"smoke_often\" \"smoke_often\" \"smoke_often\" \"smoke_often\" ...\n $ p_values      : num  3.74e-09 3.74e-09 3.74e-09 3.74e-09 3.74e-09 ...\n\nsummary(p_values)\n\n     food           characteristic        p_values     \n Length:27716       Length:27716       Min.   :0.0000  \n Class :character   Class :character   1st Qu.:0.2652  \n Mode  :character   Mode  :character   Median :0.4908  \n                                       Mean   :0.4944  \n                                       3rd Qu.:0.7223  \n                                       Max.   :1.0000  \n                                       NA's   :2470    \n\n\nI have 27,716 observations between 3 variables. The p-values range from 0 to 1. Since we are hoping to recreate the table showing “significance” between foods and various demographic or lifestyle characteristics, I plan to remove any p-values that are greater than 0.05.\nNext, I am going to remove all observations that do not have p-values entered.\n\nclean_p &lt;- p_values %&gt;% drop_na()\nstr(clean_p)\n\n'data.frame':   25246 obs. of  3 variables:\n $ food          : chr  \"GROUP_COOK_FAT_ANIMAL_FAT_TOTAL_GRAMS\" \"COOKINGFATLARD\" \"MILKONCEREALQUAN\" \"SOMEJUICEQUAN\" ...\n $ characteristic: chr  \"smoke_often\" \"smoke_often\" \"smoke_often\" \"smoke_often\" ...\n $ p_values      : num  3.74e-09 3.74e-09 3.74e-09 3.74e-09 3.74e-09 ...\n\n\nNow that I have removed all NA values, the dataset contains 25,246 observations. Next, I am going to remove any non-significant p-values from the dataset.\n\nsig_p &lt;- clean_p %&gt;%\n  filter(p_values &lt; 0.05)\nstr(sig_p)\n\n'data.frame':   1081 obs. of  3 variables:\n $ food          : chr  \"GROUP_COOK_FAT_ANIMAL_FAT_TOTAL_GRAMS\" \"COOKINGFATLARD\" \"MILKONCEREALQUAN\" \"SOMEJUICEQUAN\" ...\n $ characteristic: chr  \"smoke_often\" \"smoke_often\" \"smoke_often\" \"smoke_often\" ...\n $ p_values      : num  3.74e-09 3.74e-09 3.74e-09 3.74e-09 3.74e-09 ...\n\n\nAfter removing all non-significant p-values from the dataset, we are left with 1,081 observations. This data cleaning will make replication of the table much simpler.\nI am now going to filter my dataset to only contain the characteristics listed in the table I am attempting to recreate\n\ntable_p &lt;- sig_p %&gt;%\n  filter(characteristic %in% c(\"Jewish\", \"smoke_often\", \"dog\", \"cat\", \"rash\", \"yesCrash\", \"mathReading\", \n                               \"belly\", \"Dems\", \"left_hand\", \"readingMath\", \"right_hand\", \n                               \"favCable\", \"atheist\", \"noCrash\", \"ever_smoked\"))\n\n\nunique(sig_p$characteristic)\n\n [1] \"smoke_often\"     \"Jewish\"          \"smoke_rarely\"    \"dog\"            \n [5] \"currently_smoke\" \"quit_smoking\"    \"mathReading\"     \"rash\"           \n [9] \"right_hand\"      \"yesCrash\"        \"readingMath\"     \"left_hand\"      \n[13] \"heart_disease\"   \"Dems\"            \"belly\"           \"favCable\"       \n[17] \"cat\"             \"diabetes\"        \"ever_smoked\"     \"never_smoked\"   \n[21] \"atheist\"         \"noCrash\"         \"unfavCable\"      \"cancer\"         \n[25] \"uhCrash\"         \"neutralCable\"   \n\n\nI have now cleaned the dataset from 27,716 observations to 670 observations. I should note that there is one potential issue with recreating the table. The table links Energy Drinks and Smoking. Since there are multiple subcategories within smoking (currently_smoke, ever_smoked, smoke_rarely); this row may or may not be included within the table. Luckily, smoking does not have a p-value associated with it within the actual table, so I am hoping I can still recreate it fully.\nNow, I am going to further clean the data set to have the food items I need.\n\nunique(table_p$food)\n\n  [1] \"GROUP_COOK_FAT_ANIMAL_FAT_TOTAL_GRAMS\"                                  \n  [2] \"COOKINGFATLARD\"                                                         \n  [3] \"MILKONCEREALQUAN\"                                                       \n  [4] \"SOMEJUICEQUAN\"                                                          \n  [5] \"MINERALSYESORNO\"                                                        \n  [6] \"ALLBRANORIGTYPE\"                                                        \n  [7] \"GROUP_ALL_BRAN_ORIGINAL_TOTAL_GRAMS\"                                    \n  [8] \"GROUP_LOW_CAL_KOOLAID_TOTAL_GRAMS\"                                      \n  [9] \"GROUP_ICE_CREAM_FROZEN_YOGURT_LOW_FAT_TOTAL_GRAMS\"                      \n [10] \"GROUP_STEAK_ROAST_FAT_ON_TOTAL_GRAMS\"                                   \n [11] \"GROUP_RAW_TOMATOES_TOTAL_GRAMS\"                                         \n [12] \"GROUP_CORN_FLAKES_CORN_PUFFS_TOTAL_GRAMS\"                               \n [13] \"F18D1TN7\"                                                               \n [14] \"GROUP_PORK_FAT_ON_TOTAL_GRAMS\"                                          \n [15] \"EGGROLLQUAN\"                                                            \n [16] \"GROUP_BAGELS_WHITE_TOTAL_GRAMS\"                                         \n [17] \"GROUP_HOT_DOG_BEEF_OR_PORK_TOTAL_GRAMS\"                                 \n [18] \"V_REDOR_TOMATO\"                                                         \n [19] \"LATINO\"                                                                 \n [20] \"BUTTERQUAN\"                                                             \n [21] \"OTHERCHIPSFREQ\"                                                         \n [22] \"F18D2CLA\"                                                               \n [23] \"SODAQUAN\"                                                               \n [24] \"GROUP_CHEX_OTHER_TOTAL_GRAMS\"                                           \n [25] \"SUP_ALA\"                                                                \n [26] \"CHEXOTHERTYPE\"                                                          \n [27] \"LIFETYPE\"                                                               \n [28] \"FLAXHEMPSEEDOILTYPE\"                                                    \n [29] \"GROUP_LIFE_TOTAL_GRAMS\"                                                 \n [30] \"SHELLFISHQUAN\"                                                          \n [31] \"GROUP_SPECIAL_K_PLAIN_TOTAL_GRAMS\"                                      \n [32] \"CORNFLAKESTYPE\"                                                         \n [33] \"WHITE\"                                                                  \n [34] \"VARIETYMEATQUAN\"                                                        \n [35] \"GROUP_ICE_TEA_HOME_NO_SUGAR_TOTAL_GRAMS\"                                \n [36] \"LEMONADEFREQ\"                                                           \n [37] \"VEALLAMBGAMEQUAN\"                                                       \n [38] \"BAGELQUAN\"                                                              \n [39] \"F18D3CN3\"                                                               \n [40] \"GROUP_SOY_MILK_TOTAL_GRAMS\"                                             \n [41] \"SOMEJUICEFREQ\"                                                          \n [42] \"GROUP_YOGURT_PLAIN_FULL_FAT_TOTAL_GRAMS\"                                \n [43] \"GROUP_CANNED_FRUIT_APPLESAUCE_WITH_CANNED_CITRUS_TOTAL_GRAMS\"           \n [44] \"SUP_OM_6\"                                                               \n [45] \"PORKCHOPSFREQ\"                                                          \n [46] \"GROUP_DRINKS_WITH_SOME_JUICE_TOTAL_GRAMS\"                               \n [47] \"F20D3N3\"                                                                \n [48] \"FRIEDORBREADEDFISHQUAN\"                                                 \n [49] \"CAMD5\"                                                                  \n [50] \"COOKIESTYPE\"                                                            \n [51] \"GROUP_COOK_FAT_CANOLA_SAFFLOWER_OILS_TOTAL_GRAMS\"                       \n [52] \"SALSAFREQ\"                                                              \n [53] \"GROUP_CAKE_LOW_FAT_TOTAL_GRAMS\"                                         \n [54] \"GROUP_COOK_FAT_OTHER_OIL_COCONUT_VARIOUS_NFS_VEGETABLE_OILS_TOTAL_GRAMS\"\n [55] \"FIBERONETYPE\"                                                           \n [56] \"COOKINGFATOTHER\"                                                        \n [57] \"BEERQUAN\"                                                               \n [58] \"GROUP_SALAD_DRESSING_LOW_FAT_TOTAL_GRAMS\"                               \n [59] \"SALTFREQ\"                                                               \n [60] \"GROUP_CHOCOLATE_MILK_COCOA_HOT_CHOCOLATE_TOTAL_GRAMS\"                   \n [61] \"COFFEEDRINKSFREQ\"                                                       \n [62] \"GROUP_TORTILLA_MIX_TOTAL_GRAMS\"                                         \n [63] \"SUP_B6\"                                                                 \n [64] \"ENERGYDRINKSQUAN\"                                                       \n [65] \"GROUP_COFFEE_BOTH_KINDS_TOTAL_GRAMS\"                                    \n [66] \"TUNAQUAN\"                                                               \n [67] \"MEALREPLACEMENTDRINKSQUAN\"                                              \n [68] \"PEACHESQUAN\"                                                            \n [69] \"GROUP_OATMEAL_SQUARES_OAT_BRAN_TOTAL_GRAMS\"                             \n [70] \"V_REDOR_TOTAL\"                                                          \n [71] \"PSVEGORN\"                                                               \n [72] \"GROUP_CARROTS_CARROT_MIXES_TOTAL_GRAMS\"                                 \n [73] \"GROUP_WHOLE_GRAIN_CRACKERS_LOW_FAT_TOTAL_GRAMS\"                         \n [74] \"GROUP_CORN_BREAD_HUSH_PUPPIES_TOTAL_GRAMS\"                              \n [75] \"GROUP_COFFEE_CAFFEINE_TOTAL_GRAMS\"                                      \n [76] \"GROUP_RAISIN_BRAN_TOTAL_GRAMS\"                                          \n [77] \"COFFEEQUAN\"                                                             \n [78] \"GROUP_STEAK_ROAST_FAT_OFF_TOTAL_GRAMS\"                                  \n [79] \"GROUP_WALNUTS_FLAX_SEEDS_TOTAL_GRAMS\"                                   \n [80] \"MILKFREQ\"                                                               \n [81] \"LENTILSOUPQUAN\"                                                         \n [82] \"WALNUTSFREQ\"                                                            \n [83] \"GROUP_ICE_TEA_BOTTLE_NO_SUGAR_TOTAL_GRAMS\"                              \n [84] \"WINEQUAN\"                                                               \n [85] \"STID7\"                                                                  \n [86] \"HEAVYWORKFREQ\"                                                          \n [87] \"BOTHKINDSCOFFEETYPE\"                                                    \n [88] \"GRANOLATYPE\"                                                            \n [89] \"OYSTERSFREQ\"                                                            \n [90] \"BUNSTYPE\"                                                               \n [91] \"BISCUITFREQ\"                                                            \n [92] \"ICEDTEAFREQ\"                                                            \n [93] \"CANNEDFRUITFREQ\"                                                        \n [94] \"DT_CAFFN\"                                                               \n [95] \"OATSQUARESTYPE\"                                                         \n [96] \"SHREDDEDWHEATTYPE\"                                                      \n [97] \"BAGELTYPE\"                                                              \n [98] \"PICKLESFREQ\"                                                            \n [99] \"VITAMINB6YEARS\"                                                         \n[100] \"SLICEDCHEESEQUAN\"                                                       \n[101] \"GROUP_LIQUOR_COCKTAILS_TOTAL_GRAMS\"                                     \n[102] \"GROUP_BREAD_WHITE_TOTAL_GRAMS\"                                          \n[103] \"GROUP_REFRIED_BEANS_HUMMUS_TOTAL_GRAMS\"                                 \n[104] \"GROUP_CORN_PUFFS_TWISTS_SOY_POTATO_CHIPS_TOTAL_GRAMS\"                   \n[105] \"HICQUAN\"                                                                \n[106] \"BRISKWALKFREQ\"                                                          \n[107] \"SUP_EPA\"                                                                \n[108] \"SUP_DHA\"                                                                \n[109] \"OTHERNOODLESQUAN\"                                                       \n[110] \"SITSTR\"                                                                 \n[111] \"BAGELFREQ\"                                                              \n[112] \"OTHERFRESHFRUITQUAN\"                                                    \n[113] \"RAWTOMATOESFREQ\"                                                        \n[114] \"ZINCAMOUNT\"                                                             \n[115] \"VITAMINCYEARS\"                                                          \n[116] \"SALADDRESSINGSQUAN\"                                                     \n[117] \"PF_LEGUMES\"                                                             \n[118] \"V_LEGUMES\"                                                              \n[119] \"SPORTSDRINKSQUAN\"                                                       \n[120] \"BANANASQUAN\"                                                            \n[121] \"EXERGYMFREQ\"                                                            \n[122] \"GROUP_HI_C_CRANBERRY_JUICE_TANG_TOTAL_GRAMS\"                            \n[123] \"SUP_ZINC\"                                                               \n[124] \"SUP_B12\"                                                                \n[125] \"GROUP_SOLID_TOTAL_FREQUENCY\"                                            \n[126] \"GROUP_YOGURT_PLAIN_LOW_FAT_TOTAL_GRAMS\"                                 \n[127] \"HEAVYWORKTIME\"                                                          \n[128] \"OTHERCANDIESQUAN\"                                                       \n[129] \"GREENSALADQUAN\"                                                         \n[130] \"GROUP_OTHER_BEANS_LENTIL_CHILI_NOT_RICE_AND_BEANS_TOTAL_GRAMS\"          \n[131] \"SUP_OLEIC\"                                                              \n[132] \"GROUP_SANDWICH_BUNS_MIX_TOTAL_GRAMS\"                                    \n[133] \"MYRIC\"                                                                  \n[134] \"SUP_LZ\"                                                                 \n[135] \"GROUP_COOK_FAT_MARGARINE_TUB_TOTAL_GRAMS\"                               \n[136] \"APPLEJACKSTYPE\"                                                         \n[137] \"COOKINGFATSOFTTUBMARG\"                                                  \n[138] \"COOKINGFATLOWFATMARG\"                                                   \n[139] \"ANTIOXIDANTCOMBOYEARS\"                                                  \n[140] \"GROUP_APPLE_JACKS_COOKIE_CRISP_TOTAL_GRAMS\"                             \n[141] \"GROUP_COOK_FAT_MARGARINE_LOW_FAT_TOTAL_GRAMS\"                           \n[142] \"SUP_VITD\"                                                               \n[143] \"BEEFPORKDISHQUAN\"                                                       \n[144] \"GROUP_SOLID_COUNT\"                                                      \n[145] \"WHOLEGRAINCRACKERSQUAN\"                                                 \n[146] \"LEMONADEQUAN\"                                                           \n[147] \"ICECREAMFREQ\"                                                           \n[148] \"MILKONCEREALFREQ\"                                                       \n[149] \"FOLICACIDAMOUNT\"                                                        \n[150] \"DT_ACARO\"                                                               \n[151] \"PANCAKEQUAN\"                                                            \n[152] \"F18D2TT\"                                                                \n[153] \"CHILDCARETIME\"                                                          \n[154] \"REFRIEDBEANSQUAN\"                                                       \n[155] \"GROUP_CABBAGE_SLAW_CHINESE_CABBAGES_TOTAL_GRAMS\"                        \n[156] \"FIBERSUPPYEARS\"                                                         \n[157] \"GROUP_WINE_WHITE_TOTAL_GRAMS\"                                           \n[158] \"BREAKFASTSANDWICHQUAN\"                                                  \n[159] \"GROUP_COOKIES_LOW_FAT_TOTAL_GRAMS\"                                      \n[160] \"HICFREQ\"                                                                \n[161] \"GROUP_OTHER_FISH_DISHES_LOW_OMEGA3_TOTAL_GRAMS\"                         \n[162] \"GROUP_BROWN_RICE_DISHES_WITH_TOTAL_GRAMS\"                               \n[163] \"DONUTSQUAN\"                                                             \n[164] \"PAC_1\"                                                                  \n[165] \"OTHERPIESQUAN\"                                                          \n[166] \"VITAMINB6AMOUNT\"                                                        \n[167] \"KAEMF\"                                                                  \n[168] \"PF_SEAFD_LOW\"                                                           \n[169] \"LIGHTHOUSETIME\"                                                         \n[170] \"VIGMINS\"                                                                \n[171] \"VITAMINCQUAN\"                                                           \n[172] \"PF_MEAT\"                                                                \n[173] \"QUERCE\"                                                                 \n[174] \"GROUP_NON_FAT_SKIM_MILK_TOTAL_GRAMS\"                                    \n[175] \"USEVITSREGULARLY\"                                                       \n[176] \"SUP_VK\"                                                                 \n[177] \"COFFEEDRINKSQUAN\"                                                       \n[178] \"GROUP_BROCCOLI_BRUSSEL_SPROUTS_CHINESE_BROCCOLI_TOTAL_GRAMS\"            \n[179] \"GROUP_OYSTERS_TOTAL_GRAMS\"                                              \n[180] \"COLDCEREALFREQ\"                                                         \n[181] \"MN\"                                                                     \n[182] \"MAYOQUAN\"                                                               \n[183] \"MARGARINEQUAN\"                                                          \n[184] \"VITAMINEQUAN\"                                                           \n[185] \"VITAMINB12YEARS\"                                                        \n[186] \"ANTIOXIDANTCOMBOAMOUNT\"                                                 \n[187] \"PASTRIESQUAN\"                                                           \n[188] \"YOGURTKIND\"                                                             \n[189] \"T_FLAVONOLS\"                                                            \n[190] \"COCKTAILSQUAN\"                                                          \n[191] \"OTHERFISHQUAN\"                                                          \n[192] \"OTHERCHICKENDISHQUAN\"                                                   \n[193] \"GROUP_POULTRY_UNCOATED_NO_SKIN_TOTAL_GRAMS\"                             \n[194] \"YOGURTFREQ\"                                                             \n[195] \"OTHERNUTSFREQ\"                                                          \n[196] \"BISCUITQUAN\"                                                            \n[197] \"PAC_2\"                                                                  \n[198] \"OTHERNOODLESFREQ\"                                                       \n[199] \"PSVEGOTH\"                                                               \n[200] \"GROUP_VEAL_LAMB_GOAT_GAME_TOTAL_GRAMS\"                                  \n[201] \"SLOWWALKFREQ\"                                                           \n[202] \"CAKESQUAN\"                                                              \n[203] \"EPICATEGC3G\"                                                            \n[204] \"TOMATOJUICEQUAN\"                                                        \n[205] \"ZINCYEARS\"                                                              \n[206] \"COFFEEFREQ\"                                                             \n[207] \"GALCATEGC\"                                                              \n[208] \"GROUP_BEER_LIGHT_LOW_CARB_TOTAL_GRAMS\"                                  \n[209] \"GROUP_POPCORN_AIR_POP_FAT_FREE_TOTAL_GRAMS\"                             \n[210] \"EXERGYMTIME\"                                                            \n[211] \"JOBWALKFREQ\"                                                            \n[212] \"BUTTERFREQ\"                                                             \n[213] \"OTHERFRUITJUICESQUAN\"                                                   \n[214] \"CHOLNFR\"                                                                \n[215] \"VITAMINEAMOUNT\"                                                         \n[216] \"SWEETPOTATOESFREQ\"                                                      \n[217] \"GROUP_PICKLES_SAUERKRAUT_KIMCHI_TOTAL_GRAMS\"                            \n[218] \"COCOAFREQ\"                                                              \n[219] \"GROUP_CREAM_CHEESE_SOUR_CREAM_DIP_TOTAL_GRAMS\"                          \n[220] \"EPICATECG3\"                                                             \n[221] \"TORTILLASTYPE\"                                                          \n[222] \"GROUP_ENERGY_DRINKS_SUGAR_TOTAL_GRAMS\"                                  \n[223] \"POTATOESQUAN\"                                                           \n[224] \"APPLESFREQ\"                                                             \n[225] \"GROUP_FRIED_FISH_FISH_STICKS_SANDWICH_BREADED_FILLETS_TOTAL_GRAMS\"      \n[226] \"FOLICACIDYEARS\"                                                         \n[227] \"CATECHIN\"                                                               \n[228] \"V_OTHER\"                                                                \n[229] \"SALADDRESSINGSTYPE\"                                                     \n[230] \"EPICATEGC\"                                                              \n[231] \"PEANUTBUTTERQUAN\"                                                       \n[232] \"BUNSQUAN\"                                                               \n[233] \"GROUP_COOK_FAT_BUTTER_MARGARINE_BLEND_TOTAL_GRAMS\"                      \n[234] \"PUMPKINPIEQUAN\"                                                         \n[235] \"SPECIALKPLAINTYPE\"                                                      \n[236] \"COOKINGFATHALF\"                                                         \n[237] \"BROWNRICEFREQ\"                                                          \n[238] \"WINEFREQ\"                                                               \n[239] \"T_FLAVONOIDS\"                                                           \n[240] \"F_JUICE\"                                                                \n[241] \"OTHERFISHFREQ\"                                                          \n[242] \"F18D2I\"                                                                 \n[243] \"GROUP_TORTILLAS_CORN_TOTAL_GRAMS\"                                       \n[244] \"FIBERSUPPAMOUNT\"                                                        \n[245] \"ISORHMNTN\"                                                              \n[246] \"GROUP_GREENS_SPINACH_COOKED_TOTAL_GRAMS\"                                \n[247] \"BEANSFREQ\"                                                              \n[248] \"TUNAFREQ\"                                                               \n[249] \"A_BEAN_S\"                                                               \n[250] \"PSLEGSOY\"                                                               \n[251] \"COUMESTROL\"                                                             \n[252] \"DECAFHOTTEATYPE\"                                                        \n[253] \"LACS\"                                                                   \n[254] \"COLDCEREALQUAN\"                                                         \n[255] \"VITAMINCAMOUNT\"                                                         \n[256] \"PUDDINGFREQ\"                                                            \n[257] \"EGGSFREQ\"                                                               \n[258] \"THEARBIGN\"                                                              \n[259] \"RAISINBRANTYPE\"                                                         \n[260] \"HONBUNCHOATSTYPE\"                                                       \n[261] \"HOTDOGFREQ\"                                                             \n[262] \"T_FLAVONES\"                                                             \n[263] \"ONEADAYAMOUNT\"                                                          \n[264] \"GRITSFREQ\"                                                              \n[265] \"SODATYPE\"                                                               \n[266] \"PROTEINBARSFREQ\"                                                        \n[267] \"GROUP_GATORADE_POWERADE_TOTAL_GRAMS\"                                    \n[268] \"T_FLAVAN3OLS\"                                                           \n[269] \"DT_VITB6\"                                                               \n[270] \"GROUP_OTHER_PIE_OR_COBBLER_TOTAL_GRAMS\"                                 \n[271] \"GROUP_ORANGE_TANGERINE_GRAPEFRUIT_FRESH_TOTAL_GRAMS\"                    \n[272] \"BACONSAUSAGEFREQ\"                                                       \n[273] \"COOKINGFATBUTTER\"                                                       \n[274] \"SALMONFREQ\"                                                             \n[275] \"PHYSTR\"                                                                 \n[276] \"VITAMINEYEARS\"                                                          \n[277] \"SUP_SE\"                                                                 \n[278] \"GROUP_SAUSAGE_BACON_TOTAL_GRAMS\"                                        \n[279] \"VEGETABLESOUPFREQ\"                                                      \n[280] \"GROUP_MAYO_REGULAR_TOTAL_GRAMS\"                                         \n[281] \"THEAFLV33D\"                                                             \n[282] \"THEAFLAVIN\"                                                             \n[283] \"FRUITSFREQ\"                                                             \n[284] \"FOL_DFE\"                                                                \n[285] \"THEAFLV3G\"                                                              \n[286] \"GROUP_HIGH_PROTEIN_DRINKS_REGULAR_TOTAL_GRAMS\"                          \n[287] \"VEGGIESFREQ\"                                                            \n[288] \"THEAFLV3PG\"                                                             \n[289] \"TORTILLASFREQ\"                                                          \n[290] \"DELPH\"                                                                  \n[291] \"ICEDTEATYPE\"                                                            \n[292] \"COOKEDGREENSQUAN\"                                                       \n[293] \"CRACKERSTYPE\"                                                           \n[294] \"CREAMCHEESEFREQ\"                                                        \n[295] \"HOTDOGQUAN\"                                                             \n[296] \"PEACHESFREQ\"                                                            \n[297] \"PAC10\"                                                                  \n[298] \"CARROTSFREQ\"                                                            \n[299] \"CABBAGEFREQ\"                                                            \n[300] \"FROSTEDMINIWHEATSTYPE\"                                                  \n[301] \"GROUP_SODA_DIET_CAFFEINE_TOTAL_GRAMS\"                                   \n[302] \"GROUP_LATTE_CAPPUCCINO_WHOLE_MILK_TOTAL_GRAMS\"                          \n[303] \"GROUP_CHEESEBURGER_MEAT_AND_CHEESE_TOTAL_GRAMS\"                         \n[304] \"GROUP_LATTE_CAPPUCCINO_1_PCT_OR_2_PCT_MILK_TOTAL_GRAMS\"                 \n[305] \"BIKESWIMFREQ\"                                                           \n[306] \"LUTEOL\"                                                                 \n[307] \"SUP_OM_3\"                                                               \n[308] \"REFRIEDBEANSFREQ\"                                                       \n[309] \"FORMONONETIN\"                                                           \n[310] \"SUP_VITA\"                                                               \n[311] \"GROUP_LUNCH_MEATS_BEEF_OR_PORK_TOTAL_GRAMS\"                             \n[312] \"PAC_3\"                                                                  \n[313] \"CARROTSQUAN\"                                                            \n[314] \"GROUP_HONEY_BUNCHES_OF_OATS_TOTAL_GRAMS\"                                \n[315] \"CYAD\"                                                                   \n[316] \"GROUP_VEGETABLE_SOUP_TOTAL_GRAMS\"                                       \n[317] \"CREAMCHEESEQUAN\"                                                        \n[318] \"YOGURTQUAN\"                                                             \n[319] \"FLD\"                                                                    \n[320] \"GROUP_FROSTED_MINI_WHEATS_TOTAL_GRAMS\"                                  \n[321] \"BERRIESQUAN\"                                                            \n[322] \"VITAMINB12AMOUNT\"                                                       \n[323] \"GROUP_OTHER_100_PCT_JUICE_AND_BLENDS_TOTAL_GRAMS\"                       \n[324] \"VEALLAMBGAMEFREQ\"                                                       \n[325] \"GROUP_TOMATO_VEGETABLE_JUICE_TOTAL_GRAMS\"                               \n[326] \"PEONIDIN\"                                                               \n[327] \"GROUP_CANDY_NOT_CHOCOLATE_TOTAL_GRAMS\"                                  \n[328] \"OTHERCRACKERSQUAN\"                                                      \n[329] \"SALMONQUAN\"                                                             \n[330] \"OTHERSOUPQUAN\"                                                          \n[331] \"WHOLEGRAINCEREALFREQ\"                                                   \n[332] \"GROUP_BREAKFAST_PASTRY_MUFFINS_QUICK_BREAD_TOTAL_GRAMS\"                 \n[333] \"OTHERBREADSFREQ\"                                                        \n[334] \"HOTTEAFREQ\"                                                             \n[335] \"ASH\"                                                                    \n[336] \"GROUP_POPSICLES_SHERBET_ICES_JELLO_TOTAL_GRAMS\"                         \n[337] \"COOKEDGREENSFREQ\"                                                       \n[338] \"TOCTRA\"                                                                 \n[339] \"V_DRKGR\"                                                                \n[340] \"PSVEGDKG\"                                                               \n[341] \"NARING\"                                                                 \n[342] \"POPCORNTYPE\"                                                            \n[343] \"DT_VITK\"                                                                \n[344] \"GROUP_MUSTARD_BBQ_SAUCE_SOY_SAUCE_ETC_TOTAL_GRAMS\"                      \n[345] \"PAC_4\"                                                                  \n[346] \"MACANDCHEESEQUAN\"                                                       \n[347] \"GROUP_HIGH_OMEGA3_FISH_TOTAL_GRAMS\"                                     \n[348] \"T_ANTHOCYADNS\"                                                          \n[349] \"ORANGEJUICETYPE\"                                                        \n[350] \"F_CITMLB\"                                                               \n[351] \"SODACAFFEINE\"                                                           \n[352] \"SALSAQUAN\"                                                              \n[353] \"GROUP_SHREDDED_WHEAT_TOTAL_GRAMS\"                                       \n[354] \"GROUP_FRENCH_FRIES_FRIED_POTATOES_TOTAL_GRAMS\"                          \n[355] \"RAWTOMATOESQUAN\"                                                        \n[356] \"BERRIESFREQ\"                                                            \n[357] \"DONUTSFREQ\"                                                             \n[358] \"PSVEGNBP\"                                                               \n[359] \"AV_TOT_S\"                                                               \n[360] \"BARBECUESAUCEFREQ\"                                                      \n[361] \"ONEADAYYEARS\"                                                           \n[362] \"EPICATEC\"                                                               \n[363] \"GROUP_SPAGHETTI_MEATLESS_TOTAL_GRAMS\"                                   \n[364] \"DT_TFOL\"                                                                \n[365] \"GROUP_PORK_CHOPS_ROAST_HAM_TOTAL_GRAMS\"                                 \n[366] \"OTHERNOODLESTYPE\"                                                       \n[367] \"VEGETABLESOUPQUAN\"                                                      \n[368] \"SPECIALKFLAVSTYPE\"                                                      \n[369] \"OTHERFIBERCEREALTYPE\"                                                   \n[370] \"GROUP_OTHER_FIBER_CEREAL_TOTAL_GRAMS\"                                   \n[371] \"GROUP_SPECIAL_K_FLAVORS_TOTAL_GRAMS\"                                    \n[372] \"PAC_7\"                                                                  \n[373] \"GROUP_OTHER_MILK_ALMOND_TOTAL_GRAMS\"                                    \n[374] \"GROUP_DONUTS_TOTAL_GRAMS\"                                               \n[375] \"TORTILLASQUAN\"                                                          \n[376] \"METMINRECR\"                                                             \n[377] \"PANTAC\"                                                                 \n[378] \"OTHERSOUPFREQ\"                                                          \n[379] \"GROUP_HOT_DOG_POULTRY_LOW_FAT_TOTAL_GRAMS\"                              \n[380] \"DT_CHLN\"                                                                \n[381] \"STEAKFREQ\"                                                              \n[382] \"APIGEN\"                                                                 \n[383] \"AF_TOT_S\"                                                               \n[384] \"BEERTYPE\"                                                               \n[385] \"GROUP_SUGARYBEVG_TOTAL_FREQUENCY\"                                       \n[386] \"WEEDYARDTIME\"                                                           \n[387] \"DT_LYCO\"                                                                \n[388] \"JAMQUAN\"                                                                \n[389] \"GROUP_CHEESE_LOW_FAT_TOTAL_GRAMS\"                                       \n[390] \"SNACKS\"                                                                 \n[391] \"SUP_FIBER\"                                                              \n[392] \"PRENATALVITSYEARS\"                                                      \n[393] \"F_WHOLE\"                                                                \n[394] \"GROUP_OTHER_NOODLES_WHITE_PASTA_TOTAL_GRAMS\"                            \n[395] \"GROUP_BISCUITS_SCONES_CROISSANTS_TOTAL_GRAMS\"                           \n[396] \"SUP_MG\"                                                                 \n[397] \"CORNBREADFREQ\"                                                          \n[398] \"GROUP_WHOLE_MILK_4_PCT_FAT_TOTAL_GRAMS\"                                 \n[399] \"MK4\"                                                                    \n[400] \"GI\"                                                                     \n[401] \"GROUP_PUMPKIN_SWEET_POTATO_PIE_TOTAL_GRAMS\"                             \n[402] \"GROUP_TABLE_SALT_TOTAL_GRAMS\"                                           \n[403] \"STEAKQUAN\"                                                              \n[404] \"FROSTEDFLAKESTYPE\"                                                      \n[405] \"OTHERUNSWEETCEREALTYPE\"                                                 \n[406] \"CORNBREADQUAN\"                                                          \n[407] \"OTHERCANDIESFREQ\"                                                       \n[408] \"GROUP_AVOCADO_GUACAMOLE_TOTAL_GRAMS\"                                    \n[409] \"R_MEAT_S\"                                                               \n[410] \"GROUP_OTHER_NOODLES_WHOLE_GRAIN_TOTAL_GRAMS\"                            \n[411] \"GROUP_BUTTER_AT_TABLE_TOTAL_GRAMS\"                                      \n[412] \"DT_LUTZE\"                                                               \n[413] \"KCAL_EXPENDITURE_RECR\"                                                  \n[414] \"DT_RET\"                                                                 \n[415] \"GROUP_SPAGHETTI_WITH_MEAT_TOTAL_GRAMS\"                                  \n[416] \"CHEXWHEATTYPE\"                                                          \n[417] \"BROCCOLIFREQ\"                                                           \n[418] \"OTHERCHIPSQUAN\"                                                         \n[419] \"GROUP_PEANUTS_OTHER_NUTS_SEEDS_TOTAL_GRAMS\"                             \n[420] \"BIOCHANIN_A\"                                                            \n[421] \"GROUP_OJ_CALCIUM_FORTIFIED_TOTAL_GRAMS\"                                 \n[422] \"POPCORNFREQ\"                                                            \n[423] \"BROWNRICEQUAN\"                                                          \n[424] \"CAKESFREQ\"                                                              \n[425] \"COCKTAILSFREQ\"                                                          \n[426] \"DT_CRYPT\"                                                               \n[427] \"D_YOGURT\"                                                               \n[428] \"F18D3CN6\"                                                               \n[429] \"V_REDOR_OTHER\"                                                          \n[430] \"JOBLIFTTIME\"                                                            \n[431] \"FISHOILTYPE\"                                                            \n[432] \"CREAMINTEA\"                                                             \n[433] \"GROUP_CORN_TOTAL_GRAMS\"                                                 \n[434] \"SALADDRESSINGSFREQ\"                                                     \n[435] \"GROUP_PORK_FAT_OFF_TOTAL_GRAMS\"                                         \n[436] \"CHILDCAREFREQ\"                                                          \n[437] \"GROUP_SODA_SUGAR_CAFFEINE_TOTAL_GRAMS\"                                  \n[438] \"DT_SODI\"                                                                \n[439] \"DT_KCAL\"                                                                \n[440] \"COTTAGECHEESEFREQ\"                                                      \n[441] \"GROUP_WINE_RED_TOTAL_GRAMS\"                                             \n[442] \"CORNCHIPSFREQ\"                                                          \n[443] \"COCOAQUAN\"                                                              \n[444] \"GROUP_CHEERIOS_PLAIN_OR_MULTI_GRAIN_TOTAL_GRAMS\"                        \n[445] \"OTHERVEGGIESFREQ\"                                                       \n[446] \"DT_POTA\"                                                                \n[447] \"TOFUFREQ\"                                                               \n[448] \"ICECREAMQUAN\"                                                           \n[449] \"GROUP_KETCHUP_SALSA_TOTAL_GRAMS\"                                        \n[450] \"GROUP_YOGURT_SWEET_FULL_FAT_TOTAL_GRAMS\"                                \n[451] \"G_WHOLE\"                                                                \n[452] \"PSGWHL\"                                                                 \n[453] \"JOBLIFTFREQ\"                                                            \n[454] \"HESPT\"                                                                  \n[455] \"GROUP_GREEN_SALAD_RAW_SPINACH_TOTAL_GRAMS\"                              \n[456] \"BLACK\"                                                                  \n[457] \"GROUP_SODA_DIET_NO_CAFFEINE_TOTAL_GRAMS\"                                \n[458] \"CHOCAL\"                                                                 \n[459] \"GROUP_HIGH_PROTEIN_DRINKS_LOW_CARB_TOTAL_GRAMS\"                         \n[460] \"DT_THEO\"                                                                \n[461] \"F18D1T\"                                                                 \n[462] \"GROUP_SANDWICH_BUNS_MULTIGRAIN_TOTAL_GRAMS\"                             \n[463] \"COOKINGFATPAMORNONE\"                                                    \n[464] \"BCOMPLEXTYPEVITSYEARS\"                                                  \n[465] \"FRIESFREQ\"                                                              \n[466] \"BEERFREQ\"                                                               \n[467] \"CORNCHIPSQUAN\"                                                          \n[468] \"DT_THIA\"                                                                \n[469] \"GROUP_ICE_CREAM_REGULAR_TOTAL_GRAMS\"                                    \n[470] \"SUCS\"                                                                   \n[471] \"F15D0\"                                                                  \n[472] \"V_TOTAL\"                                                                \n[473] \"F13D0\"                                                                  \n\nfinal_p &lt;- table_p %&gt;%\n  filter(food %in% c(\"RAWTOMATOESFREQ\", \"EGGROLLQUAN\", \"ENERGYDRINKSQUAN\",\n                               \"GROUP_STEAK_ROAST_FAT_OFF_TOTAL_GRAMS\",\n                               \"GROUP_CABBAGE_SLAW_CHINESE_CABBAGES_TOTAL_GRAMS\",\n                               \"ICEDTEAFREQ\", \"SALTFREQ\", \"COFFEEDRINKSFREQ\",\n                               \"BEERQUAN\", \"FRIEDORBREADEDFISHQUAN\", \"LEMONADEFREQ\",\n                               \"SHELLFISHQUAN\", \"SODAQUAN\"))\n\nI have now created the final dataset. I am now going to provide Chat GPT with the Table from 538 as well as my dataset to recreate the table.\nAfter copying & pasting the Table contents and the contents from my final dataframe, I asked ChatGPT the following prompt: “I want to use an R package to create a publication-level quality table using the table I provided as well as the dataset”. You can find my code and prompts given to ChatGPT in the visualization-exercise.qmd file.\nAdditionally, though the original table did not provide p-values associated with Egg Rolls, Raw Tomatoes, and Energy Drinks; there were values provided in the actual data. For the sake of reproducibility, I am going to remove those values.\n\n# Create a dataframe with data\ndf &lt;- data.frame(\n  Eating_or_Drinking = c(\"Egg rolls\", \"Soda\", \"Shellfish\", \"Lemonade\", \"Shellfish\", \"Fried/breaded fish\", \"Beer\", \"Table salt\", \"Coffee\", \"Energy drinks\", \"Lemonade\", \"Steak with fat trimmed\", \"Iced tea\", \"Iced tea\", \"Raw tomatoes\", \"Cabbage\"),\n  Linked_to = c(\"Dog ownership\", \"Weird rash in the past year\", \"Right-handedness\", \"Belief that 'Crash' deserved to win best picture\", \"Left-handedness\", \"Democratic Party affiliation\", \"Frequent smoking\", \"Positive relationship with Internet service provider\", \"Cat ownership\", \"Frequent smoking\", \"Frequent smoking\", \"Lack of belief in a god\", \"Belief that 'Crash' didn't deserve to win best picture\", \"Dog ownership\", \"Judaism\", \"Innie bellybutton\"),\n  P_Value = c(2.84762e-05, 1.77172e-04, 2.03126e-04, 2.40925e-04, 3.52826e-04, 7.35258e-04, 1.28534e-03, 1.40221e-03, 1.63035e-03, 1.88478e-03, 2.61039e-03, 2.96707e-03, 4.26540e-03, 4.58258e-03, 6.28035e-03, 9.68729e-03)\n)\n\n# Replace P-Values with blank spaces for specific rows\ndf$P_Value[df$Eating_or_Drinking %in% c(\"Egg rolls\", \"Energy drinks\", \"Raw tomatoes\")] &lt;- \"\"\n\nNow, I am going to create the table:\n\n# Create a gt table\ngt_table4 &lt;- df %&gt;%\n  gt() %&gt;%\n  cols_label(\n    Eating_or_Drinking = \"Eating or Drinking\",\n    Linked_to = \"Is Linked To\",\n    P_Value = \"P-Value\"\n  ) %&gt;%\n  tab_header(\n    title = \"Our shocking new study finds that...\") %&gt;%\n  fmt_number(\n    columns = c(\"P_Value\"),\n    decimals = 4\n  )\n\n# Print the table\ngt_table4\n\n\n\n\n\n\n\nOur shocking new study finds that...\n\n\nEating or Drinking\nIs Linked To\nP-Value\n\n\n\n\nEgg rolls\nDog ownership\n\n\n\nSoda\nWeird rash in the past year\n0.000177172\n\n\nShellfish\nRight-handedness\n0.000203126\n\n\nLemonade\nBelief that 'Crash' deserved to win best picture\n0.000240925\n\n\nShellfish\nLeft-handedness\n0.000352826\n\n\nFried/breaded fish\nDemocratic Party affiliation\n0.000735258\n\n\nBeer\nFrequent smoking\n0.00128534\n\n\nTable salt\nPositive relationship with Internet service provider\n0.00140221\n\n\nCoffee\nCat ownership\n0.00163035\n\n\nEnergy drinks\nFrequent smoking\n\n\n\nLemonade\nFrequent smoking\n0.00261039\n\n\nSteak with fat trimmed\nLack of belief in a god\n0.00296707\n\n\nIced tea\nBelief that 'Crash' didn't deserve to win best picture\n0.0042654\n\n\nIced tea\nDog ownership\n0.00458258\n\n\nRaw tomatoes\nJudaism\n\n\n\nCabbage\nInnie bellybutton\n0.00968729\n\n\n\n\n\n\n\nThe visualization-exercise.qmd document contains my interaction with AI for this assignment. Some manual edits were made after ChatGPT gave me the final code. After much troubleshooting, I was unable to reorder the rows as they appear in the 538 article.\n\n\nBackground\nUnfortunately, the two figured provided in this 538 article used outside sources where the data were not provided. I am now going to switch gears to another article to recreate another figure. I found a 538 article that discusses terrorism in France versus the European Union.\nHere is the figure I am going to recreate \n\n\nImporting Dataset\n\neu_terrorism_fatalities_by_country &lt;- read.csv(\"~/Desktop/Completed/CPH_Spring24/BIOS8060E/emmahardinparker-MADA-portfolio/presentation-exercise/eu_terrorism_fatalities_by_country.csv\")\n\n\n\nRe-creating Graph\nBefore I can start trying to re-create the graph, I am going to explore and clean the data\n\nstr(eu_terrorism_fatalities_by_country)\n\n'data.frame':   45 obs. of  13 variables:\n $ iyear         : int  1970 1971 1972 1973 1974 1975 1976 1977 1978 1979 ...\n $ Belgium       : int  0 0 0 0 0 0 0 0 1 1 ...\n $ Denmark       : int  0 0 0 0 0 0 0 0 0 0 ...\n $ France        : int  0 0 1 5 3 3 7 3 21 11 ...\n $ Germany       : int  0 0 0 0 0 0 0 0 0 0 ...\n $ Greece        : int  2 0 0 5 92 1 14 1 0 1 ...\n $ Ireland       : int  1 1 6 4 34 7 5 2 1 9 ...\n $ Italy         : int  0 0 1 62 26 0 10 25 21 24 ...\n $ Luxembourg    : int  0 0 0 0 0 0 0 0 0 0 ...\n $ Netherlands   : int  0 0 0 1 1 4 0 9 1 3 ...\n $ Portugal      : int  0 0 0 0 0 0 3 0 0 3 ...\n $ Spain         : int  0 0 2 6 19 31 17 44 84 112 ...\n $ United.Kingdom: int  20 110 368 210 234 245 264 103 81 133 ...\n\nsummary(eu_terrorism_fatalities_by_country)\n\n     iyear         Belgium           Denmark            France      \n Min.   :1970   Min.   : 0.0000   Min.   :0.00000   Min.   : 0.000  \n 1st Qu.:1981   1st Qu.: 0.0000   1st Qu.:0.00000   1st Qu.: 0.000  \n Median :1992   Median : 0.0000   Median :0.00000   Median : 3.000  \n Mean   :1992   Mean   : 0.9556   Mean   :0.04444   Mean   : 6.089  \n 3rd Qu.:2003   3rd Qu.: 1.0000   3rd Qu.:0.00000   3rd Qu.: 8.000  \n Max.   :2014   Max.   :10.0000   Max.   :1.00000   Max.   :25.000  \n    Germany           Greece          Ireland           Italy        \n Min.   : 0.000   Min.   : 0.000   Min.   : 0.000   Min.   :  0.000  \n 1st Qu.: 0.000   1st Qu.: 0.000   1st Qu.: 0.000   1st Qu.:  0.000  \n Median : 0.000   Median : 1.000   Median : 1.000   Median :  1.000  \n Mean   : 1.822   Mean   : 5.711   Mean   : 2.578   Mean   :  9.356  \n 3rd Qu.: 1.000   3rd Qu.: 4.000   3rd Qu.: 3.000   3rd Qu.: 12.000  \n Max.   :27.000   Max.   :92.000   Max.   :34.000   Max.   :125.000  \n   Luxembourg  Netherlands        Portugal          Spain       \n Min.   :0    Min.   :0.0000   Min.   :0.0000   Min.   :  0.00  \n 1st Qu.:0    1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:  2.00  \n Median :0    Median :0.0000   Median :0.0000   Median : 17.00  \n Mean   :0    Mean   :0.9111   Mean   :0.7111   Mean   : 28.56  \n 3rd Qu.:0    3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.: 42.00  \n Max.   :0    Max.   :9.0000   Max.   :8.0000   Max.   :193.00  \n United.Kingdom  \n Min.   :  0.00  \n 1st Qu.:  4.00  \n Median : 63.00  \n Mean   : 75.49  \n 3rd Qu.: 95.00  \n Max.   :372.00  \n\n\nNow that I know that each Country column’s value correspondeds to the number of terrorism fatalities, I am going to combine the columns leaving EU vs. France by year.\n\n# Combine columns for France\nFrance &lt;- eu_terrorism_fatalities_by_country$France\n\n# Combine columns for the rest of the EU\nEU &lt;- rowSums(eu_terrorism_fatalities_by_country[, c(\"Belgium\", \"Denmark\", \"Germany\", \"Greece\", \"Ireland\",\n                               \"Italy\", \"Luxembourg\", \"Netherlands\", \"Portugal\", \"Spain\",\n                               \"United.Kingdom\")])\n\ncombined_data &lt;- data.frame(Year = eu_terrorism_fatalities_by_country$iyear, France = France, EU = EU)\n\n# Reshape the data for plotting\ncombined_data_long &lt;- reshape2::melt(combined_data, id.vars = \"Year\", variable.name = \"Group\", value.name = \"Deaths\")\n\nAfter interacting with AI (see visualization-exercise document), I am now ready to recreate the graph.\n\n# Calculate the maximum number of deaths and the corresponding year for France and the EU\nmax_deaths_France &lt;- max(combined_data_long$Deaths[combined_data_long$Group == \"France\"])\nyear_max_France &lt;- combined_data_long$Year[which.max(combined_data_long$Deaths[combined_data_long$Group == \"France\"])]\n\nmax_deaths_EU &lt;- max(combined_data_long$Deaths[combined_data_long$Group == \"EU\"])\nyear_max_EU &lt;- combined_data_long$Year[which.max(combined_data_long$Deaths[combined_data_long$Group == \"EU\"])]\n\n\n# Create a data frame for labels\nlabel_data &lt;- data.frame(\n  x = c(year_max_France, year_max_EU, 2004),\n  y = c(max_deaths_France, max_deaths_EU, max(max_deaths_France, max_deaths_EU)),\n  label = c(\"France\", \"European Union\", \"2004 Madrid Train Bombings\"),\n  Group = c(\"France\", \"EU\", \"Event\")\n)\n\n# Plot the line plot\nggplot(combined_data_long, aes(x = Year, y = Deaths, color = Group, fill = Group)) +\n  geom_line() +\n  geom_area(data = filter(combined_data_long, Group == \"France\"), alpha = 0.5, fill = \"salmon\") +\n  geom_area(data = filter(combined_data_long, Group == \"EU\"), alpha = 0.5, fill = \"dark salmon\") +\n  scale_fill_manual(values = c(\"France\" = \"salmon\", \"EU\" = \"dark salmon\"), guide = FALSE) +\n  scale_color_manual(values = c(\"France\" = \"salmon\", \"EU\" = \"black\")) +\n  labs(title = \"Previous Terrorism Deaths in France & the EU\",\n       subtitle = \"European Union member countries as of 1986\",\n       color = \"Group\",\n       fill = \"Group\") +\n  theme_minimal() +\n  scale_x_continuous(breaks = c(1970, 1975, 1980, 1985, 1990, 1995, 2000, 2005, 2010),\n                     labels = c(\"'70\", \"'75\", \"'80\", \"'85\", \"'90\", \"'95\", 2000, \"'05\", \"'10\")) +\n  annotate(\"text\", x = year_max_France, y = max_deaths_France, label = \"France\", color = \"salmon\",\n           size = 4, hjust = 1.2, vjust = -1) +\n  annotate(\"text\", x = year_max_EU, y = max_deaths_EU, label = \"European Union\", color = \"dark salmon\",\n           size = 4, hjust = 1.2, vjust = 1) +\n  annotate(\"text\", x = 2004, y = max(max_deaths_France, max_deaths_EU),\n           label = \"2004 Madrid Train Bombings\", color = \"black\", size = 4, hjust = 0.5, vjust = 12) +\n  guides(fill = FALSE)  # Hide the legend for labels\n\nWarning: The `&lt;scale&gt;` argument of `guides()` cannot be `FALSE`. Use \"none\" instead as\nof ggplot2 3.3.4.\n\n\n\n\n\n\n\n\n\nWhile I wasn’t able to get a lot of the aesthetic components to look identical to the 538 article, ChatGPT & I were able to create a similar result!"
  },
  {
    "objectID": "fitting-exercise/fitting-exercise.html",
    "href": "fitting-exercise/fitting-exercise.html",
    "title": "Fitting Exercise",
    "section": "",
    "text": "Loading necessary packages\nlibrary(tidymodels)\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(yardstick)\nlibrary(pROC)\nlibrary(caret)\nImporting the Mavoglurant dataset from this GitHub repository\ndata_location &lt;- here::here(\"fitting-exercise\", \"Mavoglurant_A2121_nmpk.csv\")\n\n# Reading the CSV file into a data frame\nmavoglurant &lt;- readr::read_csv(data_location)\n\nRows: 2678 Columns: 17\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (17): ID, CMT, EVID, EVI2, MDV, DV, LNDV, AMT, TIME, DOSE, OCC, RATE, AG...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "fitting-exercise/fitting-exercise.html#model-predictions-and-uncertainty",
    "href": "fitting-exercise/fitting-exercise.html#model-predictions-and-uncertainty",
    "title": "Fitting Exercise",
    "section": "Model predictions and uncertainty",
    "text": "Model predictions and uncertainty\n\n# set the seed for reproducibility\nrngseed = 12345\nset.seed(rngseed)\n\n# create 100 bootstraps with the training data\nbootstraps &lt;- bootstraps(data = train_data, times = 100)\n\n# create empty vector to store predictions list \npreds_bs &lt;- vector(\"list\", length = length(bootstraps))\nfor (i in 1:length(bootstraps)) {# for-loop to fit the modelto make predictions of the bootstrap\ndat_sample &lt;- analysis(bootstraps$splits[[i]])  \n# fitting the model using the created bootstrap dat_sample\nmodel &lt;- lm(Y ~ DOSE + AGE + HT + WT + SEX, data = dat_sample) \n\n#Recording the predictions \npredictions &lt;- predict(model, newdata = train_data) \npreds_bs[[i]] &lt;- predictions # store predictions in the empty vector\n}\n# bootstrap sample \nsample &lt;- analysis(bootstraps$splits[[i]])\nhead(sample)\n\n# A tibble: 6 × 6\n      Y  DOSE   AGE SEX      WT    HT\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 1958.  25      26 1      70.5  1.68\n2 1949.  50      39 1      75.7  1.78\n3 2772.  37.5    28 1      78.3  1.72\n4 2978.  50      49 1      97.3  1.80\n5 2749.  37.5    41 1      82.6  1.83\n6 2155.  37.5    30 1      85.4  1.86\n\n\nNow I have preditions stored, I will compute the mean and 95% confidence intervals.\n\n# I will create an array to store the predictions\npsamples &lt;- length(preds_bs)\npdatapoints &lt;- length(preds_bs[[1]])  \npreds_array &lt;- array(NA, dim = c(psamples, pdatapoints))\n\n# storing predictions from bootstrappping\nfor (i in 1:psamples) {\n  preds_array[i,] &lt;- unlist(preds_bs[[i]])\n}\n# finding the Mean and confidence intervals \npreds &lt;- preds_array %&gt;% apply(2, quantile,  c(0.055, 0.5, 0.945)) %&gt;% t()\nhead(preds)\n\n         5.5%      50%    94.5%\n[1,] 3271.941 3347.935 3423.928\n[2,] 1966.299 2005.265 2044.231\n[3,] 2722.442 2774.500 2826.558\n[4,] 1956.486 2136.621 2316.756\n[5,] 2799.216 2919.028 3038.840\n[6,] 1116.766 1136.345 1155.924\n\n\nA figure that plots observed values on the x-axis, and point estimate (obtained from your original predictions on the training data), as well as median and the upper and lower bounds - obtained by the bootstrap sampling .\n\n# create a dataset for the figure\nfig_data &lt;- data.frame(observed = c(train_data$Y), points = c(ptrain2$.pred),\n                        mean = preds[, 2], lower_bound = preds[, 1],upper_bound = preds[, 3]\n)\n\n# A plot of obeserved, preditions, mean, and confidence intervals\nggplot(fig_data, aes(x = observed, y = points)) +\n  geom_point(color = \"black\") +  \n  geom_point(aes(y = mean), color = \"green\") + \n  geom_errorbar(aes(ymin = lower_bound, ymax = upper_bound), width = 0.1, color = \"blue\") + \n  geom_abline(slope = 1, intercept = 0, linetype = \"dashed\", color = \"black\") +  # add 45 degree line\n  xlim(0, 5000) +\n  ylim(0, 5000) +\n  labs(x = \"Observed Values\", y = \"Predicted Values\")\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_point()`).\nRemoved 1 row containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nThe data points in the scatter plot are clustered around the line of perfect fit, which suggests that the model’s predictions are generally accurate. However, there are also some data points that deviate from the line, indicating that the model’s predictions are not always perfect.\nThere seems to be a trend where the data points become more scattered as the observed values increase. This suggests that the model may be less accurate at predicting higher observed values.\nPart 3: Final Model evaluation using test data\n\n# Create linear regression model specification\nlin_mod &lt;- linear_reg() %&gt;% set_engine(\"lm\")\n\n# Fit the model to the training data\ntrain2 &lt;- lin_mod %&gt;% fit(Y ~ ., data = train_data)\nmodel2pred &lt;- predict(train2, new_data = train_data)\n\n# Use the fitted model to make predictions for the test data\ntest_predictions &lt;- predict(train2, new_data = test_data)\n\n#Dataframe with observed and predicted values, along with model labels\ntest_train_df &lt;- data.frame(\n  observed = c(train_data$Y), \n  model2pred = c(model2pred$.pred),  # Predicted values for Model 2 on train\n  test_predictions = c(test_predictions$.pred),     # Predicted values for model 2 on test\n  model = rep(c(\"Train Model 2\", \"Test Model 2\"), each = nrow(train_data)))  \nhead(test_train_df)\n\n  observed model2pred test_predictions         model\n1  3004.21   3303.028         1871.407 Train Model 2\n2  1346.62   1952.556         2664.857 Train Model 2\n3  2771.69   2744.878         2357.237 Train Model 2\n4  2027.60   2081.182         2954.489 Train Model 2\n5  2353.40   2894.205         2100.673 Train Model 2\n6   826.43   1264.763         3479.345 Train Model 2\n\n# Filter the data frame for training and test data\ntrain_df &lt;- test_train_df[test_train_df$model == \"Train Model 2\", ]\ntest_df &lt;- test_train_df[test_train_df$model == \"Test Model 2\", ]\n\n# Create the plot\ntest_v_train &lt;- ggplot() +\n  geom_point(data = train_df, aes(x = observed, y = model2pred, color = \"Training\", shape = \"Training\"), alpha = 0.5) +\n  geom_point(data = test_df, aes(x = observed, y = test_predictions, color = \"Test\", shape = \"Test\"), alpha = 0.5) +\n  geom_abline(intercept = 0, slope = 1, linetype = \"dashed\") +\n  labs(\n    x = \"Observed\",\n    y = \"Predicted\",\n    title = \"Predicted vs Observed\",\n    color = \"Model\",\n    shape = \"Model\"\n  ) +\n  scale_color_manual(values = c(\"Training\" = \"blue\", \"Test\" = \"red\")) +\n  scale_shape_manual(values = c(\"Training\" = 16, \"Test\" = 17)) +\n  theme_minimal()\ntest_v_train\n\n\n\n\n\n\n\n\nThis plot shows that most test points were mixed in with training points; however, we can see evidence of over fitting to the training data. Model 1 includes only the dose as a predictor and performed better than the null model, indicating that dose alone has more predictive power for the outcome variable, Y. We can observe this by comparing the RMSE values calculated previously. Model 2 further performed better than the null model and model 1, indicating that all predictors contribute significantly to explaining the variability of the outcome, Y. I would not consider model 1 to be useful for any real purpose as the RMSE was still considerably “high” and only using one predictor is not representative of the data itself. I would consider Model 2 to be relatively “usable”, however, it didn’t provide an overly stellar performance. Model 2’s inclusion of all predictors increases its ability to explain the variability in the outcome, Y and had a lower RMSE than both the null model and model 1.\nSaving the clean data set into an RDS file to then use in the ml-models-exercise.qmd file\n\ngetwd()\n\n[1] \"/Users/ehardinparker/Desktop/Completed/CPH_Spring24/BIOS8060E/emmahardinparker-MADA-portfolio/fitting-exercise\"\n\nsetwd(\"/Users/ehardinparker/Desktop/Completed/CPH_Spring24/BIOS8060E/emmahardinparker-MADA-portfolio/fitting-exercise\")\n\nsaveRDS(final_data, file = \"/Users/ehardinparker/Desktop/Completed/CPH_Spring24/BIOS8060E/emmahardinparker-MADA-portfolio/fitting-exercise/data_with_race.rds\")\n\n# Specify the source file path (current location of the RDS file)\nsource_file &lt;- \"/Users/ehardinparker/Desktop/Completed/CPH_Spring24/BIOS8060E/emmahardinparker-MADA-portfolio/fitting-exercise/data_with_race.rds\"\n\n# Specify the destination folder where you want to copy the RDS file\ndestination_folder &lt;- \"/Users/ehardinparker/Desktop/Completed/CPH_Spring24/BIOS8060E/emmahardinparker-MADA-portfolio/ml-models-exercise/\"\n\n# Use file.copy() to copy the RDS file to the destination folder\nfile.copy(from = source_file, to = destination_folder)\n\n[1] FALSE"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "WELCOME!",
    "section": "",
    "text": "WELCOME!\nI am a second-year MPH candidate at the University of Georgia concentrating in Biostatistics seeking professional opportunies in data analysis and development. This site will include information about me, as well as my work completed in various coursework and research projects. This website was originally created as a medium for showcasing my coursework in BIOS 8060: Modern Applied Data Analysis, taken at UGA in the Spring 2024 semester.\n\nPlease use the Menu Bar above to take a look.\nFeel free to contact me by email at egh14911@uga.edu or ehardinparker@gmail.com\nLinkedIn\n\n\n\n\nHeadshot"
  },
  {
    "objectID": "eda2.html",
    "href": "eda2.html",
    "title": "EMMA HARDIN-PARKER: DATA ANALYSIS PORTFOLIO",
    "section": "",
    "text": "title: “An example exploratory analysis script”\nauthor: “Emma Hardin-Parker”\ndate: “1/18/2024”"
  },
  {
    "objectID": "eda2.html#output-html_document",
    "href": "eda2.html#output-html_document",
    "title": "EMMA HARDIN-PARKER: DATA ANALYSIS PORTFOLIO",
    "section": "output: html_document",
    "text": "output: html_document\n---\ntitle: “An example exploratory analysis script”\nauthor: “Andreas Handel”\ndate: “10/28/2021”\noutput: html_document\n---\nThis Quarto file loads the cleaned data and does some exploring.\nI’m only showing it the way where the code is included in the file.\nAs described in the `processing_code` materials, I currently prefer the approach of having R code in a separate file and pulling it in.\nBut I already had this written and haven’t yet re-done it that way. Feel free to redo and send a pull request on GitHub :)\nAgain, it is largely a matter of preference and what makes the most sense to decide if one wants to have code inside Quarto files, or as separate R files.\nAnd sometimes, an R script with enough comments is good enough and one doesn’t need a Quarto file.\nAlso note that while here I split cleaning and exploring, this is iterative. You saw that as part of the processing, we already had to explore the data somewhat to understand how to clean it. In general, as you explore, you’ll find things that need cleaning. As you clean, you can explore more. Therefore, at times it might make more sense to combine the cleaning and exploring code parts into a single R or Quarto file. Or split things in any other logical way.\nAs part of the exploratory analysis, you should produce plots or tables or other summary quantities for the most interesting/important quantities in your data. Depending on the total number of variables in your dataset, explore all or some of the others. Figures produced here might be histograms or density plots, correlation plots, etc. Tables might summarize your data.\nStart by exploring one variable at a time. Then continue by creating plots or tables of the outcome(s) of interest and the predictor/exposure/input variables you are most interested in. If your dataset is small, you can do that for all variables.\nPlots produced here can be scatterplots, boxplots, violinplots, etc. Tables can be simple 2x2 tables or larger ones.\n# Setup\n```{r}\n#load needed packages. make sure they are installed.\nlibrary(here) #for data loading/saving\nlibrary(dplyr)\nlibrary(skimr)\nlibrary(ggplot2)\n```\nLoad the data.\n```{r}\n#Path to data. Note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(“starter-analysis-exercise”,“data”,“processed-data”,“processeddata.rds”)\n#load data\nmydata &lt;- readRDS(data_location)\n```\n# Data exploration through tables\nShowing a bit of code to produce and save a summary table.\n```{r}\nsummary_df = skimr::skim(mydata)\nprint(summary_df)\n# save to file\nsummarytable_file = here(“starter-analysis-exercise”,“results”, “tables-files”, “summarytable.rds”)\nsaveRDS(summary_df, file = summarytable_file)\n```\nWe are saving the results to the `results/tables` folder. Structure the folders inside `results` such that they make sense for your specific analysis. Provide enough documentation that someone can understand what you are doing and what goes where. `readme.md` files inside each folder are a good idea.\n# Data exploration through figures\nHistogram plots for the continuous outcomes.\nHeight first.\n```{r}\np1 &lt;- mydata %&gt;% ggplot(aes(x=Height)) + geom_histogram()\nplot(p1)\nfigure_file = here(“starter-analysis-exercise”,“results”,“figures”,“height-distribution.png”)\nggsave(filename = figure_file, plot=p1)\n```\nNow weights.\n```{r}\np2 &lt;- mydata %&gt;% ggplot(aes(x=Weight)) + geom_histogram()\nplot(p2)\nfigure_file = here(“starter-analysis-exercise”,“results”,“figures”,“weight-distribution.png”)\nggsave(filename = figure_file, plot=p2)\n```\nNow height as function of weight.\n```{r}\np3 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight)) + geom_point() + geom_smooth(method=‘lm’)\nplot(p3)\nfigure_file = here(“starter-analysis-exercise”,“results”,“figures”,“height-weight.png”)\nggsave(filename = figure_file, plot=p3)\n```\nOnce more height as function of weight, stratified by gender. Note that there is so little data, it’s a bit silly. But we’ll plot it anyway.\n```{r}\np4 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight, color = Gender)) + geom_point() + geom_smooth(method=‘lm’)\nplot(p4)\nfigure_file = here(“starter-analysis-exercise”,“results”,“figures”,“height-weight-stratified.png”)\nggsave(filename = figure_file, plot=p4)\n```\n# Notes\nFor your own explorations, tables and figures can be “quick and dirty”. As long as you can see what’s going on, there is no need to polish them. That’s in contrast to figures you’ll produce for your final products (paper, report, presentation, website, etc.). Those should look as nice, polished and easy to understand as possible."
  },
  {
    "objectID": "data-exercise/data-exercise.html",
    "href": "data-exercise/data-exercise.html",
    "title": "Data Exercise",
    "section": "",
    "text": "For this assignment, I have chosen to create a synthetic data set containing randomly generated data about 100 NFL players.\n\n#Loading required packages \n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(purrr)\nlibrary(lubridate)\nlibrary(here)\n\nhere() starts at /Users/ehardinparker/Desktop/Completed/CPH_Spring24/BIOS8060E/emmahardinparker-MADA-portfolio\n\n\nBelow I am setting a seed for the sake of reproducibility, as well as defining the number of players I intend to create data for.\n\n#Setting a seed for reproducibility \nset.seed(129)\n\n#Defining the number of observations (100 players)\nn_players &lt;- 100\n\nBelow I am creating the actual data frame. I have decided to create an ID variable for each player that is numbered 1-100. I set the age variable to have a min of 22 and a max of 33. I originally tried to set the age variable using round & rnorm, but found that some players were listed as being as young as 16 and as old as 50. To avoid this, I set the minimum and maximum to roughly relate to the ages of most active NFL players. For the position variable, I decided to include both offensive and defensive players, however, I am very much aware that some randomized relational data points (forty_time & position) may result in ridiculous results. I set the height variable in centimeters and the weight variable in pounds. If needed for future analyses, I may convert the height variable into inches. I also got a quick look at the data using the head() function to briefly view the first five rows. I also took a deeper look after using the head() function to get some summary statistics of the data using both the summary() and glimpse() functions\n\n#Creating an empty data frame with placeholders for variables \n\nsyn_data &lt;- data.frame(\n  ID = numeric(n_players),\n  Age = numeric(n_players),\n  Position = character(n_players),\n  Forty_Time = numeric(n_players),\n  Height = numeric(n_players),\n  Weight = numeric(n_players)\n)\n\n#  Defining individual variables \n\nsyn_data$ID &lt;- 1:n_players\n\nsyn_data$Age &lt;- round(runif(n_players, min = 22, max = 33), 1)\n\nsyn_data$Position &lt;- purrr::map_chr(sample(c(\"QB\", \"RB\", \"WR\", \"DE\", \"CB\", \"LB\", \"TE\"), n_players, replace = TRUE), as.character)\n\nsyn_data$Forty_Time &lt;- runif(n_players, min = 4.2, max = 5.0)\n\nsyn_data$Height &lt;- round(runif(n_players, min = 177.8, max = 198.12), 1)\n\nsyn_data$Weight &lt;- round(rnorm(n_players, mean = 225, sd = 10), 1)\n\n# Viewing first 5 observations \nhead(syn_data, 5)\n\n  ID  Age Position Forty_Time Height Weight\n1  1 23.4       WR   4.840918  198.0  227.4\n2  2 25.5       TE   4.357144  195.3  218.9\n3  3 23.8       RB   4.550497  178.2  221.3\n4  4 25.4       CB   4.476869  195.4  235.7\n5  5 22.9       TE   4.722912  181.5  223.1\n\n## Taking a look at the generated data \nsummary(syn_data)\n\n       ID              Age          Position           Forty_Time   \n Min.   :  1.00   Min.   :22.00   Length:100         Min.   :4.211  \n 1st Qu.: 25.75   1st Qu.:24.85   Class :character   1st Qu.:4.392  \n Median : 50.50   Median :27.10   Mode  :character   Median :4.597  \n Mean   : 50.50   Mean   :27.21                      Mean   :4.593  \n 3rd Qu.: 75.25   3rd Qu.:29.80                      3rd Qu.:4.786  \n Max.   :100.00   Max.   :32.80                      Max.   :4.983  \n     Height          Weight     \n Min.   :178.1   Min.   :200.9  \n 1st Qu.:183.7   1st Qu.:218.5  \n Median :189.2   Median :224.8  \n Mean   :188.9   Mean   :224.9  \n 3rd Qu.:194.6   3rd Qu.:231.7  \n Max.   :198.1   Max.   :250.7  \n\nView(syn_data)\ndplyr::glimpse(syn_data)\n\nRows: 100\nColumns: 6\n$ ID         &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ Age        &lt;dbl&gt; 23.4, 25.5, 23.8, 25.4, 22.9, 28.4, 23.0, 26.1, 32.7, 22.2,…\n$ Position   &lt;chr&gt; \"WR\", \"TE\", \"RB\", \"CB\", \"TE\", \"WR\", \"LB\", \"WR\", \"DE\", \"QB\",…\n$ Forty_Time &lt;dbl&gt; 4.840918, 4.357144, 4.550497, 4.476869, 4.722912, 4.874354,…\n$ Height     &lt;dbl&gt; 198.0, 195.3, 178.2, 195.4, 181.5, 195.0, 188.3, 186.5, 180…\n$ Weight     &lt;dbl&gt; 227.4, 218.9, 221.3, 235.7, 223.1, 250.7, 234.5, 223.1, 239…\n\n\nAfter getting a quick look at the data ad seeing that it turned out the way I intended, I am now going to save the data as a CSV file into the data-exercise folder.\n\n##Saving synthetic data into CSV file within the data-exercise folder in repository \n\nwrite.csv(syn_data, here(\"data-exercise\", \"syn_data.csv\"), row.names = FALSE)\n\nI am now going to start generating some plots to further explore the data.\n\n##Boxplot of Forty Times grouped by Position \n\nggplot(syn_data, aes(x = Position, y = Forty_Time)) +\n  geom_boxplot() +\n  labs(x = \"Position\", y = \"Time in the Forty Yard Dash\") +\n  theme_bw()\n\n\n\n\n\n\n\n\nFrom the plot above, we can see that Defensive Ends (DE) have the slowest forty-yard-dash time, on average, compared to the rest of the positions. This would be expected in real life as DEs are typically the largest players on the field and rarely can run at the same speed as skill position players. The top 3 fastest positions on average are cornerbacks (CB), quarterbacks (QB), and linebackers (LB). Though we would expect wide receivers (WR) and running backs (RB) to be among the fastest, this plot does not skew from what we would expect too severely.\n\n## Boxplot of Weight by Position \n\nggplot(syn_data, aes(x = Position, y = Weight)) +\n  geom_boxplot() +\n  labs(x = \"Position\", y = \"Weight (lbs)\") +\n  theme_bw()\n\n\n\n\n\n\n\n\nThis plot shows the issues with randomized synthetic data. Per the NFL, defensive lineman average at 6’3” and 310 pounds. I would have to go into more depth data generation to ensure that associations are correct based off of real-life scenarios. For example, men are on average taller than women, and if the data were not structured correctly, the distribution of height between men and women would be correct. Creating this plot was a teaching moment and moving forward I need to be more careful when creating data like this.\nNow that I know that position and weight will not yield any accurate association, I am going to create one more plot of position and height to see if that association is more realistic.\n\nggplot(syn_data, aes(x = Position, y = Height)) +\n  geom_boxplot() +\n  labs(x = \"Position\", y = \"Height (cm)\") +\n  theme_bw()\n\n\n\n\n\n\n\n\nThe original plot I created (not shown) did not generate the results I was looking for.I initially tried to use the rnorm() function to grab the mean, however, the last time I checked, there is not a 7’ tall linebacker in the NFL. To fix this, I went back to the variable definition code and changed rnorm() to runif() and set the min and max to 5’10” and 6’6”, respectively. As previously stated, the average height of a DE is 6’3”. Here, the average DE is around 6’1”. This plot now looks pretty decent, considering the small sample size (n = 100), To my surprise, this plot contains three outliers. Since this is my first time generating synthetic data, I was under the impression that randomly created fake data would not produce any true outliers.\nNow that I have created three exploratory plots, I am now going to fit some models to see if there are any statistically significant associations in the data. I am electing not to use position & weight, as the plot above shows clearly that the data was not created to be robust to real-life differences in association.\n\n## Fitting model between position and forty_time \n\nsyn_fit1 &lt;- lm(Forty_Time ~ Position, data = syn_data)\nsummary(syn_fit1)\n\n\nCall:\nlm(formula = Forty_Time ~ Position, data = syn_data)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.48826 -0.20019  0.01398  0.18668  0.45853 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)  4.58537    0.07302  62.792   &lt;2e-16 ***\nPositionDE  -0.06399    0.09888  -0.647    0.519    \nPositionLB   0.11360    0.09309   1.220    0.225    \nPositionQB  -0.08087    0.09713  -0.833    0.407    \nPositionRB   0.01360    0.09561   0.142    0.887    \nPositionTE  -0.02846    0.09561  -0.298    0.767    \nPositionWR   0.04452    0.08872   0.502    0.617    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.2309 on 93 degrees of freedom\nMultiple R-squared:  0.07307,   Adjusted R-squared:  0.01326 \nF-statistic: 1.222 on 6 and 93 DF,  p-value: 0.3022\n\n\nFrom this summary table we can see that the association between the dependent variable (forty time) and independent variable (position) is not statistically significant. The residual median is close to zero, indicating that there there may be little variation in our residuals. This also indicates that our residuals would be somewhat symmetrical and would predict correctly on both high and low ends of a q-q plot. However, the multiple r-squared value of 0.0527 says that the position explains only 5.27% of the variation in forty yard dash time. Finally, the p-value sits slightly over our typical 0.05 threshold, which would indicate there is no strong evidence that associates position and forty yard dash time.\n\n# Creating second fit model\n\nsyn_fit2 &lt;- lm(Height ~ Position, data = syn_data)\nsummary(syn_fit2)\n\n\nCall:\nlm(formula = Height ~ Position, data = syn_data)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-12.544  -5.431   0.285   4.931  11.114 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 189.9300     1.9156  99.147   &lt;2e-16 ***\nPositionDE   -3.8217     2.5938  -1.473    0.144    \nPositionLB    1.7137     2.4420   0.702    0.485    \nPositionQB    0.1623     2.5480   0.064    0.949    \nPositionRB   -3.0443     2.5082  -1.214    0.228    \nPositionTE   -1.3514     2.5082  -0.539    0.591    \nPositionWR   -1.4300     2.3275  -0.614    0.540    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 6.058 on 93 degrees of freedom\nMultiple R-squared:  0.0819,    Adjusted R-squared:  0.02267 \nF-statistic: 1.383 on 6 and 93 DF,  p-value: 0.2298\n\n\nThis model suggests that there is not a statistically significant association between height and position. If we look at the multiple R-squared value alone we can see that position only explains 2.92% of the variation of height. Also, the p-value sits at 0.8, which is significantly higher than the typical 95% alpha = 0.05 level."
  },
  {
    "objectID": "coding-exercise/coding-exercise.html",
    "href": "coding-exercise/coding-exercise.html",
    "title": "R Coding Exercise",
    "section": "",
    "text": "Loading dslabs package\n\n#loading dslabs \nlibrary(dslabs)\n\n\n#viewing help file for gapminder data\nhelp(\"gapminder\")\n\nOverview of Data Structure\n\nstr(gapminder)\n\n'data.frame':   10545 obs. of  9 variables:\n $ country         : Factor w/ 185 levels \"Albania\",\"Algeria\",..: 1 2 3 4 5 6 7 8 9 10 ...\n $ year            : int  1960 1960 1960 1960 1960 1960 1960 1960 1960 1960 ...\n $ infant_mortality: num  115.4 148.2 208 NA 59.9 ...\n $ life_expectancy : num  62.9 47.5 36 63 65.4 ...\n $ fertility       : num  6.19 7.65 7.32 4.43 3.11 4.55 4.82 3.45 2.7 5.57 ...\n $ population      : num  1636054 11124892 5270844 54681 20619075 ...\n $ gdp             : num  NA 1.38e+10 NA NA 1.08e+11 ...\n $ continent       : Factor w/ 5 levels \"Africa\",\"Americas\",..: 4 1 1 2 2 3 2 5 4 3 ...\n $ region          : Factor w/ 22 levels \"Australia and New Zealand\",..: 19 11 10 2 15 21 2 1 22 21 ...\n\n\nSummary of the Data & Viewing the Data\n\nsummary(gapminder)\n\n                country           year      infant_mortality life_expectancy\n Albania            :   57   Min.   :1960   Min.   :  1.50   Min.   :13.20  \n Algeria            :   57   1st Qu.:1974   1st Qu.: 16.00   1st Qu.:57.50  \n Angola             :   57   Median :1988   Median : 41.50   Median :67.54  \n Antigua and Barbuda:   57   Mean   :1988   Mean   : 55.31   Mean   :64.81  \n Argentina          :   57   3rd Qu.:2002   3rd Qu.: 85.10   3rd Qu.:73.00  \n Armenia            :   57   Max.   :2016   Max.   :276.90   Max.   :83.90  \n (Other)            :10203                  NA's   :1453                    \n   fertility       population             gdp               continent   \n Min.   :0.840   Min.   :3.124e+04   Min.   :4.040e+07   Africa  :2907  \n 1st Qu.:2.200   1st Qu.:1.333e+06   1st Qu.:1.846e+09   Americas:2052  \n Median :3.750   Median :5.009e+06   Median :7.794e+09   Asia    :2679  \n Mean   :4.084   Mean   :2.701e+07   Mean   :1.480e+11   Europe  :2223  \n 3rd Qu.:6.000   3rd Qu.:1.523e+07   3rd Qu.:5.540e+10   Oceania : 684  \n Max.   :9.220   Max.   :1.376e+09   Max.   :1.174e+13                  \n NA's   :187     NA's   :185         NA's   :2972                       \n             region    \n Western Asia   :1026  \n Eastern Africa : 912  \n Western Africa : 912  \n Caribbean      : 741  \n South America  : 684  \n Southern Europe: 684  \n (Other)        :5586  \n\n\nDetermining the class of gapminder\n\nclass(gapminder)\n\n[1] \"data.frame\"\n\n\nAdding tidyverse to the library\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nAssigning African countries to new vector & viewing new vector\n\nafricadata &lt;- gapminder %&gt;%\n  filter(continent == \"Africa\")\n\nViewing structure and summary of africadata\n\nstr(africadata)\n\n'data.frame':   2907 obs. of  9 variables:\n $ country         : Factor w/ 185 levels \"Albania\",\"Algeria\",..: 2 3 18 22 26 27 29 31 32 33 ...\n $ year            : int  1960 1960 1960 1960 1960 1960 1960 1960 1960 1960 ...\n $ infant_mortality: num  148 208 187 116 161 ...\n $ life_expectancy : num  47.5 36 38.3 50.3 35.2 ...\n $ fertility       : num  7.65 7.32 6.28 6.62 6.29 6.95 5.65 6.89 5.84 6.25 ...\n $ population      : num  11124892 5270844 2431620 524029 4829291 ...\n $ gdp             : num  1.38e+10 NA 6.22e+08 1.24e+08 5.97e+08 ...\n $ continent       : Factor w/ 5 levels \"Africa\",\"Americas\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ region          : Factor w/ 22 levels \"Australia and New Zealand\",..: 11 10 20 17 20 5 10 20 10 10 ...\n\nsummary(africadata)\n\n         country          year      infant_mortality life_expectancy\n Algeria     :  57   Min.   :1960   Min.   : 11.40   Min.   :13.20  \n Angola      :  57   1st Qu.:1974   1st Qu.: 62.20   1st Qu.:48.23  \n Benin       :  57   Median :1988   Median : 93.40   Median :53.98  \n Botswana    :  57   Mean   :1988   Mean   : 95.12   Mean   :54.38  \n Burkina Faso:  57   3rd Qu.:2002   3rd Qu.:124.70   3rd Qu.:60.10  \n Burundi     :  57   Max.   :2016   Max.   :237.40   Max.   :77.60  \n (Other)     :2565                  NA's   :226                     \n   fertility       population             gdp               continent   \n Min.   :1.500   Min.   :    41538   Min.   :4.659e+07   Africa  :2907  \n 1st Qu.:5.160   1st Qu.:  1605232   1st Qu.:8.373e+08   Americas:   0  \n Median :6.160   Median :  5570982   Median :2.448e+09   Asia    :   0  \n Mean   :5.851   Mean   : 12235961   Mean   :9.346e+09   Europe  :   0  \n 3rd Qu.:6.860   3rd Qu.: 13888152   3rd Qu.:6.552e+09   Oceania :   0  \n Max.   :8.450   Max.   :182201962   Max.   :1.935e+11                  \n NA's   :51      NA's   :51          NA's   :637                        \n                       region   \n Eastern Africa           :912  \n Western Africa           :912  \n Middle Africa            :456  \n Northern Africa          :342  \n Southern Africa          :285  \n Australia and New Zealand:  0  \n (Other)                  :  0  \n\n\nNew object containing only infant_mortality and life_expectancy\n\ninfant_expect &lt;- subset(africadata, select = c(infant_mortality, life_expectancy))\n\n## looking a structure of infant_expect\nstr(infant_expect)\n\n'data.frame':   2907 obs. of  2 variables:\n $ infant_mortality: num  148 208 187 116 161 ...\n $ life_expectancy : num  47.5 36 38.3 50.3 35.2 ...\n\n## summary of infant_expect \nsummary(infant_expect)\n\n infant_mortality life_expectancy\n Min.   : 11.40   Min.   :13.20  \n 1st Qu.: 62.20   1st Qu.:48.23  \n Median : 93.40   Median :53.98  \n Mean   : 95.12   Mean   :54.38  \n 3rd Qu.:124.70   3rd Qu.:60.10  \n Max.   :237.40   Max.   :77.60  \n NA's   :226                     \n\n\nNew object containing only population and life_expectancy\n\npop_expect &lt;- subset(africadata, select = c(life_expectancy, population))\n\n##structure of pop_expect\nstr(pop_expect)\n\n'data.frame':   2907 obs. of  2 variables:\n $ life_expectancy: num  47.5 36 38.3 50.3 35.2 ...\n $ population     : num  11124892 5270844 2431620 524029 4829291 ...\n\n##summary of pop_expect\nsummary(pop_expect)\n\n life_expectancy   population       \n Min.   :13.20   Min.   :    41538  \n 1st Qu.:48.23   1st Qu.:  1605232  \n Median :53.98   Median :  5570982  \n Mean   :54.38   Mean   : 12235961  \n 3rd Qu.:60.10   3rd Qu.: 13888152  \n Max.   :77.60   Max.   :182201962  \n                 NA's   :51         \n\n\nLibrary ggplot2 for future plots\n\nlibrary(ggplot2)\n\nPlotting life expectancy as a function of infant mortality\n\nexpect_infant_plot &lt;- ggplot(infant_expect, aes(x = infant_mortality, y = life_expectancy)) +\n  geom_point()\n\nexpect_infant_plot\n\nWarning: Removed 226 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nPlotting life expectancy as a function of population\n\nexpect_pop_plot &lt;- ggplot(pop_expect, aes(x = population, y = life_expectancy)) +\n  geom_point() + \n  scale_y_continuous()\n\nexpect_pop_plot\n\nWarning: Removed 51 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nTo explore why there are “streaks” of data in the plot above, I manually sorted africadata by country to see how population and life_expectancy change over time. By looking at the data this way, I could see that over time as population size increased, life expectancy increased as well. For example, from 1960 to 2015, Algeria’s population increased from 11,124,892to 39,666,519 and life expectancy increased from 47.50 years to 76.40 years.\nFinding which years have NA values\n\ncolSums(is.na(africadata)) ##finding out how many NA values exist for each column \n\n         country             year infant_mortality  life_expectancy \n               0                0              226                0 \n       fertility       population              gdp        continent \n              51               51              637                0 \n          region \n               0 \n\nwhere_na_infant &lt;- africadata %&gt;% ## creating object that clearly shows which years have missing values for infant mortality\n  filter(is.na(infant_mortality))\n\nFiltering africadata to only include the year 2000\n\nafrica_twothousand &lt;- africadata %&gt;%\n  filter(year == \"2000\")\n\n\nstr(africa_twothousand) ## double checking structure\n\n'data.frame':   51 obs. of  9 variables:\n $ country         : Factor w/ 185 levels \"Albania\",\"Algeria\",..: 2 3 18 22 26 27 29 31 32 33 ...\n $ year            : int  2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ...\n $ infant_mortality: num  33.9 128.3 89.3 52.4 96.2 ...\n $ life_expectancy : num  73.3 52.3 57.2 47.6 52.6 46.7 54.3 68.4 45.3 51.5 ...\n $ fertility       : num  2.51 6.84 5.98 3.41 6.59 7.06 5.62 3.7 5.45 7.35 ...\n $ population      : num  31183658 15058638 6949366 1736579 11607944 ...\n $ gdp             : num  5.48e+10 9.13e+09 2.25e+09 5.63e+09 2.61e+09 ...\n $ continent       : Factor w/ 5 levels \"Africa\",\"Americas\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ region          : Factor w/ 22 levels \"Australia and New Zealand\",..: 11 10 20 17 20 5 10 20 10 10 ...\n\nsummary(africa_twothousand) ## triple checking structure \n\n         country        year      infant_mortality life_expectancy\n Algeria     : 1   Min.   :2000   Min.   : 12.30   Min.   :37.60  \n Angola      : 1   1st Qu.:2000   1st Qu.: 60.80   1st Qu.:51.75  \n Benin       : 1   Median :2000   Median : 80.30   Median :54.30  \n Botswana    : 1   Mean   :2000   Mean   : 78.93   Mean   :56.36  \n Burkina Faso: 1   3rd Qu.:2000   3rd Qu.:103.30   3rd Qu.:60.00  \n Burundi     : 1   Max.   :2000   Max.   :143.30   Max.   :75.00  \n (Other)     :45                                                  \n   fertility       population             gdp               continent \n Min.   :1.990   Min.   :    81154   Min.   :2.019e+08   Africa  :51  \n 1st Qu.:4.150   1st Qu.:  2304687   1st Qu.:1.274e+09   Americas: 0  \n Median :5.550   Median :  8799165   Median :3.238e+09   Asia    : 0  \n Mean   :5.156   Mean   : 15659800   Mean   :1.155e+10   Europe  : 0  \n 3rd Qu.:5.960   3rd Qu.: 17391242   3rd Qu.:8.654e+09   Oceania : 0  \n Max.   :7.730   Max.   :122876723   Max.   :1.329e+11                \n                                                                      \n                       region  \n Eastern Africa           :16  \n Western Africa           :16  \n Middle Africa            : 8  \n Northern Africa          : 6  \n Southern Africa          : 5  \n Australia and New Zealand: 0  \n (Other)                  : 0  \n\n\nPlotting life expectancy as a function of infant mortality for the year 2000\n\nexpect_infant_plot2000 &lt;- ggplot(africa_twothousand, aes(x = infant_mortality, y = life_expectancy)) +\n  geom_point()\n\nexpect_infant_plot2000\n\n\n\n\n\n\n\n\nPlotting life expectancy as a function of population for the year 2000\n\nexpect_pop_plot2000 &lt;- ggplot(africa_twothousand, aes(x = population, y = life_expectancy)) +\n  geom_point() + \n  scale_y_continuous()\n\nexpect_pop_plot2000\n\n\n\n\n\n\n\n\nBeginning simple model fits\n\nfit1 &lt;- lm(life_expectancy ~ infant_mortality, africa_twothousand)\n\nfit2 &lt;- lm(life_expectancy ~ population, africa_twothousand)\n\nSummary of both fit models\n\nsummary(fit1)\n\n\nCall:\nlm(formula = life_expectancy ~ infant_mortality, data = africa_twothousand)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-22.6651  -3.7087   0.9914   4.0408   8.6817 \n\nCoefficients:\n                 Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)      71.29331    2.42611  29.386  &lt; 2e-16 ***\ninfant_mortality -0.18916    0.02869  -6.594 2.83e-08 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 6.221 on 49 degrees of freedom\nMultiple R-squared:  0.4701,    Adjusted R-squared:  0.4593 \nF-statistic: 43.48 on 1 and 49 DF,  p-value: 2.826e-08\n\nsummary(fit2)\n\n\nCall:\nlm(formula = life_expectancy ~ population, data = africa_twothousand)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-18.429  -4.602  -2.568   3.800  18.802 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 5.593e+01  1.468e+00  38.097   &lt;2e-16 ***\npopulation  2.756e-08  5.459e-08   0.505    0.616    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 8.524 on 49 degrees of freedom\nMultiple R-squared:  0.005176,  Adjusted R-squared:  -0.01513 \nF-statistic: 0.2549 on 1 and 49 DF,  p-value: 0.6159\n\n\nFor the model fitting life expectancy as the outcome and infant mortality as the predictor, the p-value is statistically significant at 2.826 x 10^-8. This p-value alone could suggest an association between life expectancy and infant mortality.\nFor the model fitting life expectancy as the outcome and population as the predictor, the p-value is 0.6159, well above the typical alpha = 0.05 threshold. This indicates that there is no evidence to suggest an association or correlation between life expectancy and population.\nTHIS SECTION CONTRIBUTED BY KEVIN KOSEWICK\nFor this part of the exercise, I will be using the “divorce_margarine” data set that contains divorce rate/1000 people in Maine, per capita margarine consumption (lbs) in the U.S., and the year. We’ll load dslabs and view the dataset.\n\n#loading dslabs \nlibrary(dslabs)\n\n\n#viewing help file for divorce_margarine data\nhelp(\"divorce_margarine\")\n\nWe’ll load the overview and summary of the data.\n\n#structure of data\nstr(divorce_margarine)\n\n'data.frame':   10 obs. of  3 variables:\n $ divorce_rate_maine              : num  5 4.7 4.6 4.4 4.3 4.1 4.2 4.2 4.2 4.1\n $ margarine_consumption_per_capita: num  8.2 7 6.5 5.3 5.2 4 4.6 4.5 4.2 3.7\n $ year                            : int  2000 2001 2002 2003 2004 2005 2006 2007 2008 2009\n\n#summary of data\nsummary(divorce_margarine)\n\n divorce_rate_maine margarine_consumption_per_capita      year     \n Min.   :4.10       Min.   :3.700                    Min.   :2000  \n 1st Qu.:4.20       1st Qu.:4.275                    1st Qu.:2002  \n Median :4.25       Median :4.900                    Median :2004  \n Mean   :4.38       Mean   :5.320                    Mean   :2004  \n 3rd Qu.:4.55       3rd Qu.:6.200                    3rd Qu.:2007  \n Max.   :5.00       Max.   :8.200                    Max.   :2009  \n\n\nWe’ll now inspect the class of the data set and load the tidyverse package to begin data processing.\n\n#check the class\nclass(divorce_margarine)\n\n[1] \"data.frame\"\n\n#load tidyverse\nlibrary(tidyverse)\n\nWe will create an object with only divorce rate and margarine consumption.\n\n#first, make an object with divorce_margarine data set\nfulldivorce&lt;- divorce_margarine\n\n#next, make the object with only divorce_rate_maine and margarine_consumption_per_capita\nmargdivorce &lt;- subset(divorce_margarine, select = c(divorce_rate_maine, margarine_consumption_per_capita))\n\n#structure and summary checks\nstr(margdivorce)\n\n'data.frame':   10 obs. of  2 variables:\n $ divorce_rate_maine              : num  5 4.7 4.6 4.4 4.3 4.1 4.2 4.2 4.2 4.1\n $ margarine_consumption_per_capita: num  8.2 7 6.5 5.3 5.2 4 4.6 4.5 4.2 3.7\n\nsummary(margdivorce)\n\n divorce_rate_maine margarine_consumption_per_capita\n Min.   :4.10       Min.   :3.700                   \n 1st Qu.:4.20       1st Qu.:4.275                   \n Median :4.25       Median :4.900                   \n Mean   :4.38       Mean   :5.320                   \n 3rd Qu.:4.55       3rd Qu.:6.200                   \n Max.   :5.00       Max.   :8.200                   \n\n\nPlot divorce rate as a function of margarine consumption.\n\n#load ggplot for plot design\nlibrary(ggplot2)\n#plot divorce as a function of margarine\ndivorce_margarine_plot &lt;- ggplot(margdivorce, aes(x = divorce_rate_maine, y = margarine_consumption_per_capita)) +\n  geom_point()\n#load the plot\nplot(divorce_margarine_plot)\n\n\n\n\n\n\n\n\nThe plot indicates a strong positive correlation between margarine consumption and divorce rates. The true enemy of all Maine marriages seems to be butter substitutes. Now we’ll plot divorce rates as a function of the year.\n\n#create an object with just year and divorce rates\nyeardivorce &lt;- subset(divorce_margarine, select = c(divorce_rate_maine, year))\n#plot divorce as a function of the year\ndivorce_year_plot &lt;- ggplot(yeardivorce, aes(x = divorce_rate_maine, y = year)) +\n  geom_point()\n#load the plot\nplot(divorce_year_plot)\n\n\n\n\n\n\n\n\nOur plot indicates that divorce rates have decreased over time in Maine. We’ll now make a plot to see how margarine consumption has changed over the years.\n\n#make an object with just margarine consumption and years\nyearmarg &lt;- subset(divorce_margarine, select = c(margarine_consumption_per_capita, year))\n#plot margarine consumption as a function of the year\nmargarine_year_plot &lt;- ggplot(yearmarg, aes(x = margarine_consumption_per_capita, y = year)) +\n  geom_point()\n#plot it\nplot(margarine_year_plot)\n\n\n\n\n\n\n\n\nOur plot indicates that margarine consumption has decreased over the years. The year is negatively correlated with both margarine consumption and divorce rates; however, divorce seems to be more frequent in years with higher margarine consumption. To make sure that America’s consumption of margarine is truly the reason for failed marriages in Maine, we’ll create some linear models. First, we’ll fit just margarine consumption as a predictor for divorce rates. Then, we’ll fit both year and margarine as predictors for divorce rates.\n\n#fit margarine as a predictor for divorce\nfit_margarine_only &lt;- lm(divorce_rate_maine ~ margarine_consumption_per_capita, divorce_margarine)\n\n#fit marg and year as predicotrs for divorce\nfit_margarine_year &lt;- lm(divorce_rate_maine ~ margarine_consumption_per_capita + year, divorce_margarine)\n\n#call both plots\nsummary(fit_margarine_only)\n\n\nCall:\nlm(formula = divorce_rate_maine ~ margarine_consumption_per_capita, \n    data = divorce_margarine)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.05583 -0.01816 -0.01452  0.03601  0.04625 \n\nCoefficients:\n                                 Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)                      3.308626   0.048032   68.88 2.20e-12 ***\nmargarine_consumption_per_capita 0.201386   0.008735   23.05 1.33e-08 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.03841 on 8 degrees of freedom\nMultiple R-squared:  0.9852,    Adjusted R-squared:  0.9833 \nF-statistic: 531.5 on 1 and 8 DF,  p-value: 1.33e-08\n\nsummary(fit_margarine_year)\n\n\nCall:\nlm(formula = divorce_rate_maine ~ margarine_consumption_per_capita + \n    year, data = divorce_margarine)\n\nResiduals:\n      Min        1Q    Median        3Q       Max \n-0.045018 -0.025107  0.000966  0.025113  0.046884 \n\nCoefficients:\n                                   Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)                      -26.631668  20.119380  -1.324    0.227    \nmargarine_consumption_per_capita   0.229594   0.020629  11.130 1.05e-05 ***\nyear                               0.014862   0.009987   1.488    0.180    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.03579 on 7 degrees of freedom\nMultiple R-squared:  0.9887,    Adjusted R-squared:  0.9855 \nF-statistic: 307.2 on 2 and 7 DF,  p-value: 1.517e-07\n\n\nOur models indicate that year is not a statistically significant predictor of divorce rates, but margarine consumption is. Both models apparently describe most of the variation as well given our R-squared values. These results would seem to indicate that we can attribute more frequent divorces in Maine to the amount of margarine Americans consume a year. However, if given a bit of thought, this correlation makes no sense and should not be equated to causation. Regardless, it’s a fun analysis to run."
  },
  {
    "objectID": "aboutme.html",
    "href": "aboutme.html",
    "title": "ABOUT ME",
    "section": "",
    "text": "Fall Break 2023\n\n\n\nEducation & Work Experience\nI am in my second year of the MPH | Biostatistics program at the University of Georgia, predominantly taking course in biostatistics, mathematical statistics, epidemiology, and data analysis. I received my BS in Public Health and a minor in Data Analytics from Furman University in 2023. While at Furman, I had the opportunity to intern and work with the Institute for the Advancement of Community Health (IACH) as an evaluation coordinator. Throughout my time at IACH, I had the privilege of working with community partners such as LiveWell Greenville, the Well-Being Partnership of Greenville (WBP), and the Greenville County School System on various evaluation projects. My main research and evaluation efforts were geared towards childhood obesity, food access, ad mental health, One of my main projects was assisting in the development of a Mental Health Indicator Dashboard for the WBP.\n\n\nSoftware Experience & Looking Forward\nI have experience with RStudio, SAS, LaTeX, and RMarkdown from previous coursework and evaluation projects. I am excited for the opportunity to be exposed to new programs and software programs. Mainly, I am seeking professional opportunities to further my experience in data analysis.\n\n\nMe outside of Academia!\nIn my free time, my favorite thing to study is beer! I am currently working toward my second level of certification under the Cicerone Program which is, for lack of a better word, a program geared to helping individuals become “sommeliers” of beer. One of the main perks of working at a brewery is being exposed to the analytics involved in brewing beer and learning the ins and outs of the science of brewing! This article explains how Beer30 software can be used to better manage brewing data as a whole and increase predictive analysis measures."
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html",
    "href": "cdcdata-exercise/cdcdata-exercise.html",
    "title": "CDC Data Exercise",
    "section": "",
    "text": "Data Introduction and Loading\nI accessed the data for this assignment at this link. I chose a data set from the National Center for Health Statistics (NCHS) that provides data on quarterly provisional estimates for selected birth indicators. These indicators include teen birth rate, low birth weight, NICU admissions, pre-term births, etc. These indicators are stratified by race/ethnicity and age groups. There is an overall Rate column that is subsetted into “per 100 births” or “per 1,000 population.”\nI am now going to load any required packages along with the original, uncleaned data set.\n\nlibrary(readr)\nlibrary(here)\n\nhere() starts at /Users/ehardinparker/Desktop/Completed/CPH_Spring24/BIOS8060E/emmahardinparker-MADA-portfolio\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ purrr     1.0.2\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggplot2)\n\nnchs_data &lt;- read_csv(\"~/Desktop/Completed/CPH_Spring24/BIOS8060E/emmahardinparker-MADA-portfolio/cdcdata-exercise/NCHS_-_VSRR_Quarterly_provisional_estimates_for_selected_birth_indicators_20240915.csv\")\n\nRows: 900 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (7): Year and Quarter, Topic, Topic Subgroup, Indicator, Race Ethnicity ...\ndbl (1): Rate\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nView(nchs_data)\n\n\n\nInitial Data Exploration and Cleaning\nI am now going to get a quick look at the data by using the str(), summary(), and glimpse() functions.\n\nstr(nchs_data)\n\nspc_tbl_ [900 × 8] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ Year and Quarter       : chr [1:900] \"2024 Q1\" \"2024 Q1\" \"2024 Q1\" \"2024 Q1\" ...\n $ Topic                  : chr [1:900] \"Birth Rates\" \"Birth Rates\" \"Birth Rates\" \"Birth Rates\" ...\n $ Topic Subgroup         : chr [1:900] \"Age-specific Birth Rates\" \"Age-specific Birth Rates\" \"Age-specific Birth Rates\" \"Age-specific Birth Rates\" ...\n $ Indicator              : chr [1:900] \"10-14 years\" \"10-14 years\" \"10-14 years\" \"10-14 years\" ...\n $ Race Ethnicity Category: chr [1:900] \"All races and origins\" \"Hispanic\" \"Non-Hispanic Black\" \"Non-Hispanic White\" ...\n $ Rate                   : num [1:900] 0.2 0.3 0.3 0.1 13.2 21.3 19.1 8.5 55.1 78.3 ...\n $ Unit                   : chr [1:900] \"per 1,000 population\" \"per 1,000 population\" \"per 1,000 population\" \"per 1,000 population\" ...\n $ Significant            : chr [1:900] NA NA \"*\" NA ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   `Year and Quarter` = col_character(),\n  ..   Topic = col_character(),\n  ..   `Topic Subgroup` = col_character(),\n  ..   Indicator = col_character(),\n  ..   `Race Ethnicity Category` = col_character(),\n  ..   Rate = col_double(),\n  ..   Unit = col_character(),\n  ..   Significant = col_character()\n  .. )\n - attr(*, \"problems\")=&lt;externalptr&gt; \n\nsummary(nchs_data)\n\n Year and Quarter      Topic           Topic Subgroup      Indicator        \n Length:900         Length:900         Length:900         Length:900        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n Race Ethnicity Category      Rate             Unit          \n Length:900              Min.   :  0.100   Length:900        \n Class :character        1st Qu.:  7.595   Class :character  \n Mode  :character        Median : 14.900   Mode  :character  \n                         Mean   : 28.160                     \n                         3rd Qu.: 48.532                     \n                         Max.   :114.300                     \n Significant       \n Length:900        \n Class :character  \n Mode  :character  \n                   \n                   \n                   \n\nglimpse(nchs_data)\n\nRows: 900\nColumns: 8\n$ `Year and Quarter`        &lt;chr&gt; \"2024 Q1\", \"2024 Q1\", \"2024 Q1\", \"2024 Q1\", …\n$ Topic                     &lt;chr&gt; \"Birth Rates\", \"Birth Rates\", \"Birth Rates\",…\n$ `Topic Subgroup`          &lt;chr&gt; \"Age-specific Birth Rates\", \"Age-specific Bi…\n$ Indicator                 &lt;chr&gt; \"10-14 years\", \"10-14 years\", \"10-14 years\",…\n$ `Race Ethnicity Category` &lt;chr&gt; \"All races and origins\", \"Hispanic\", \"Non-Hi…\n$ Rate                      &lt;dbl&gt; 0.2, 0.3, 0.3, 0.1, 13.2, 21.3, 19.1, 8.5, 5…\n$ Unit                      &lt;chr&gt; \"per 1,000 population\", \"per 1,000 populatio…\n$ Significant               &lt;chr&gt; NA, NA, \"*\", NA, \"*\", NA, \"*\", \"*\", \"*\", \"*\"…\n\n\nThe data set has 1,110 observations and 8 variables. At first glance there doesn’t seem to be any NA values, but I am going to check using the NA values. After print nchs_na, I found that there were no NA values, however, I took that command out as it printed “FALSE” for every observation in the data set.\n\nnchs_na &lt;- is.na(nchs_data)\n\nnchs_data &lt;- nchs_data %&gt;%\n  mutate(Significant = as.character(Significant))\n\nnchs_recode &lt;- nchs_data %&gt;%\n  mutate(Significance_Status = case_when(\n    Significant == \"*\" ~ 1,\n    Significant == \"\" ~ 0,\n    TRUE ~ NA_integer_  \n  ))\n\nTo accomplish this I used the is.na() function to determine if there were any NA values in the data set. I then mutated the Significant column to treat the observations as characters (* or missing) by using as.character(). I then mutated a new variable, Significance_Status to recode the missing values as zeroes and the asteriks as ones.\n\n\nExploratory Data Analysis\nI am now going to create an exploratory plot to see which race/ethnicity category had the largest birth rate by Year & Quarter.\n\nfiltered_race &lt;- nchs_recode %&gt;%\n  filter(`Race Ethnicity Category` != \"All races and origins\")  # Remove rows where 'Race' is \"All\"\n\n\nbirth_rate_bar &lt;- filtered_race %&gt;%\n  group_by(`Year and Quarter`) %&gt;%\n  filter(Topic == \"Birth Rates\") %&gt;% \n  ggplot(aes(x = interaction(Indicator, RaceEthnicityCategory), y = Rate, fill = `Race Ethnicity Category`)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = \"Birth Rate Rate by Age Category and Race\",\n       x = \"Age Category / Race\",\n       y = \"Rate\") +\n  scale_x_discrete(labels = function(x) gsub(\"\\\\.\", \"-\", x)) +  \n  theme(axis.text.x = element_text(angle = 60, hjust = 1))  \n\nhispanic_rate_bar &lt;- nchs_recode %&gt;%\n  filter(`Race Ethnicity Category` == \"Hispanic\") %&gt;%\n  filter(Topic == \"Birth Rates\") %&gt;%\n  group_by(`Year and Quarter`) %&gt;%\n  ggplot(aes(x = interaction(Indicator, `Race Ethnicity Category`), y = Rate, fill = `Race Ethnicity Category`)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = \"Birth Rate Rate by Age Category and Race\",\n       x = \"Age Category / Race\",\n       y = \"Rate\") +\n  scale_x_discrete(labels = function(x) gsub(\"\\\\.\", \"-\", x)) +  \n  theme(axis.text.x = element_text(angle = 60, hjust = 1)) \n\nwhite_rate_bar &lt;- nchs_recode %&gt;%\n  filter(`Race Ethnicity Category` == \"Non-Hispanic White\") %&gt;%\n  filter(Topic == \"Birth Rates\") %&gt;%\n  group_by(`Year and Quarter`) %&gt;%\n  ggplot(aes(x = interaction(Indicator, `Race Ethnicity Category`), y = Rate)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = \"Birth Rate Rate by Age Category and Race\",\n       x = \"Age Category / Race\",\n       y = \"Rate\") +\n  scale_x_discrete(labels = function(x) gsub(\"\\\\.\", \"-\", x)) +  \n  theme(axis.text.x = element_text(angle = 60, hjust = 1)) +\n  scale_color_viridis_d()\n\nblack_rate_bar &lt;- nchs_recode %&gt;%\n  filter(`Race Ethnicity Category` == \"Non-Hispanic Black\") %&gt;%\n  filter(Topic == \"Birth Rates\") %&gt;%\n  group_by(`Year and Quarter`) %&gt;%\n  ggplot(aes(x = interaction(Indicator, `Race Ethnicity Category`), y = Rate)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = \"Birth Rate Rate by Age Category and Race\",\n       x = \"Age Category / Race\",\n       y = \"Rate\") +\n  scale_x_discrete(labels = function(x) gsub(\"\\\\.\", \"-\", x)) +  \n  scale_color_viridis_b() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) \n\n\nprint(hispanic_rate_bar)\n\n\n\n\n\n\n\nprint(black_rate_bar)\n\n\n\n\n\n\n\nprint(white_rate_bar)\n\n\n\n\n\n\n\n\nI am now going to create plots exploring the rate of low birthweight (per 100 births) by race\n\nlow_birth &lt;- filtered_race %&gt;%\n  filter(`Topic Subgroup` == \"Low Birthweight Rates\") %&gt;%\n  group_by(`Race Ethnicity Category`) %&gt;%\n  ggplot(aes(x = interaction(Indicator, `Race Ethnicity Category`), y = Rate, fill = `Race Ethnicity Category`)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = \"Low Birthweight Rates by Race\",\n       x = \"Age Category / Race\",\n       y = \"Rate\") +\n  scale_x_discrete(labels = function(x) gsub(\"\\\\.\", \"-\", x)) +  \n  scale_color_identity() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) \nprint(low_birth)\n\n\n\n\n\n\n\n\nI am now going to create a similar plot concerning preterm birth rates per 100 births by race.\n\npre_birth &lt;- filtered_race %&gt;%\n  filter(`Topic Subgroup` == \"Preterm Birth Rates\") %&gt;%\n  group_by(`Race Ethnicity Category`) %&gt;%\n  ggplot(aes(x = interaction(Indicator, `Race Ethnicity Category`), y = Rate, fill = `Race Ethnicity Category`)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = \"Preterm Birth Rates by Race\",\n       x = \"Race\",\n       y = \"Rate\") +\n  scale_x_discrete(labels = function(x) gsub(\"\\\\.\", \"-\", x)) +  \n  scale_color_identity() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) \n\nprint(pre_birth)\n\n\n\n\n\n\n\n\nI am now going to create a similar plot concerning NICU admission rates per 100 births by race.\n\nNICU &lt;- filtered_race %&gt;%\n  filter(`Topic Subgroup` == \"NICU Admission Rates\") %&gt;%\n  group_by(`Race Ethnicity Category`) %&gt;%\n  ggplot(aes(x = interaction(Indicator, `Race Ethnicity Category`), y = Rate, fill = `Race Ethnicity Category`)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = \"NICU Admission Rates by Age Category and Race\",\n       x = \"Race\",\n       y = \"Rate\") +\n  scale_x_discrete(labels = function(x) gsub(\"\\\\.\", \"-\", x)) +  \n  scale_color_identity() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) \n\nprint(NICU)\n\n\n\n\n\n\n\n\nI am now going to create a similar plot exploring Teen Birth Rates by Age Category and Race\n\nteen_birth &lt;- filtered_race %&gt;%\n  filter(`Topic Subgroup` == \"Teen Birth Rates\") %&gt;%\n  group_by(`Race Ethnicity Category`) %&gt;%\n  ggplot(aes(x = interaction(Indicator, `Race Ethnicity Category`), y = Rate, fill = `Race Ethnicity Category`)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = \" Teen Birth Rate Rate by Age Category and Race\",\n       x = \"Age Category / Race\",\n       y = \"Rate\") +\n  scale_x_discrete(labels = function(x) gsub(\"\\\\.\", \"-\", x)) +  \n  scale_color_viridis_b() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) \n\nprint(teen_birth)\n\n\n\n\n\n\n\n\nThis section contributed by KEVIN KOSEWICK.\nFor this section, I’ll create a synthetic dataset that attempts to mimic the original as closely as possible. To do this, I’ll scramble the variables (in the way that a synthetic scrambled set was produced in the module for synthetic data) that Emma explored originally and reproduce her analyses and see what we get.\n\n#set seed for reproducability\nset.seed(123)\n\n# Create a copy of the original data frame\nfiltered_copy &lt;- filtered_race\n\n# Scramble the column in the copied data frame\nfiltered_copy$Rate &lt;- sample(filtered_race$Rate)\n\n#check the new scrambled set to make sure everything is the same except for the numbers we wanted to change\nsummary(filtered_copy)\n\n Year and Quarter      Topic           Topic Subgroup      Indicator        \n Length:675         Length:675         Length:675         Length:675        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n Race Ethnicity Category      Rate             Unit          \n Length:675              Min.   :  0.100   Length:675        \n Class :character        1st Qu.:  7.545   Class :character  \n Mode  :character        Median : 15.500   Mode  :character  \n                         Mean   : 28.563                     \n                         3rd Qu.: 48.775                     \n                         Max.   :114.300                     \n                                                             \n Significant        Significance_Status\n Length:675         Min.   :1          \n Class :character   1st Qu.:1          \n Mode  :character   Median :1          \n                    Mean   :1          \n                    3rd Qu.:1          \n                    Max.   :1          \n                    NA's   :621        \n\nstructure(filtered_copy)\n\n# A tibble: 675 × 9\n   `Year and Quarter` Topic    `Topic Subgroup` Indicator Race Ethnicity Categ…¹\n   &lt;chr&gt;              &lt;chr&gt;    &lt;chr&gt;            &lt;chr&gt;     &lt;chr&gt;                 \n 1 2024 Q1            Birth R… Age-specific Bi… 10-14 ye… Hispanic              \n 2 2024 Q1            Birth R… Age-specific Bi… 10-14 ye… Non-Hispanic Black    \n 3 2024 Q1            Birth R… Age-specific Bi… 10-14 ye… Non-Hispanic White    \n 4 2024 Q1            Birth R… Age-specific Bi… 15-19 ye… Hispanic              \n 5 2024 Q1            Birth R… Age-specific Bi… 15-19 ye… Non-Hispanic Black    \n 6 2024 Q1            Birth R… Age-specific Bi… 15-19 ye… Non-Hispanic White    \n 7 2024 Q1            Birth R… Age-specific Bi… 20-24 ye… Hispanic              \n 8 2024 Q1            Birth R… Age-specific Bi… 20-24 ye… Non-Hispanic Black    \n 9 2024 Q1            Birth R… Age-specific Bi… 20-24 ye… Non-Hispanic White    \n10 2024 Q1            Birth R… Age-specific Bi… 25-29 ye… Hispanic              \n# ℹ 665 more rows\n# ℹ abbreviated name: ¹​`Race Ethnicity Category`\n# ℹ 4 more variables: Rate &lt;dbl&gt;, Unit &lt;chr&gt;, Significant &lt;chr&gt;,\n#   Significance_Status &lt;dbl&gt;\n\nglimpse(filtered_copy)\n\nRows: 675\nColumns: 9\n$ `Year and Quarter`        &lt;chr&gt; \"2024 Q1\", \"2024 Q1\", \"2024 Q1\", \"2024 Q1\", …\n$ Topic                     &lt;chr&gt; \"Birth Rates\", \"Birth Rates\", \"Birth Rates\",…\n$ `Topic Subgroup`          &lt;chr&gt; \"Age-specific Birth Rates\", \"Age-specific Bi…\n$ Indicator                 &lt;chr&gt; \"10-14 years\", \"10-14 years\", \"10-14 years\",…\n$ `Race Ethnicity Category` &lt;chr&gt; \"Hispanic\", \"Non-Hispanic Black\", \"Non-Hispa…\n$ Rate                      &lt;dbl&gt; 7.87, 102.20, 0.40, 0.30, 2.26, 2.62, 64.60,…\n$ Unit                      &lt;chr&gt; \"per 1,000 population\", \"per 1,000 populatio…\n$ Significant               &lt;chr&gt; NA, \"*\", NA, NA, \"*\", \"*\", \"*\", \"*\", \"*\", \"*…\n$ Significance_Status       &lt;dbl&gt; NA, 1, NA, NA, 1, 1, 1, 1, 1, 1, 1, 1, NA, 1…\n\n#compare to the original\nsummary(filtered_race)\n\n Year and Quarter      Topic           Topic Subgroup      Indicator        \n Length:675         Length:675         Length:675         Length:675        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n Race Ethnicity Category      Rate             Unit          \n Length:675              Min.   :  0.100   Length:675        \n Class :character        1st Qu.:  7.545   Class :character  \n Mode  :character        Median : 15.500   Mode  :character  \n                         Mean   : 28.563                     \n                         3rd Qu.: 48.775                     \n                         Max.   :114.300                     \n                                                             \n Significant        Significance_Status\n Length:675         Min.   :1          \n Class :character   1st Qu.:1          \n Mode  :character   Median :1          \n                    Mean   :1          \n                    3rd Qu.:1          \n                    Max.   :1          \n                    NA's   :621        \n\nstructure(filtered_race)\n\n# A tibble: 675 × 9\n   `Year and Quarter` Topic    `Topic Subgroup` Indicator Race Ethnicity Categ…¹\n   &lt;chr&gt;              &lt;chr&gt;    &lt;chr&gt;            &lt;chr&gt;     &lt;chr&gt;                 \n 1 2024 Q1            Birth R… Age-specific Bi… 10-14 ye… Hispanic              \n 2 2024 Q1            Birth R… Age-specific Bi… 10-14 ye… Non-Hispanic Black    \n 3 2024 Q1            Birth R… Age-specific Bi… 10-14 ye… Non-Hispanic White    \n 4 2024 Q1            Birth R… Age-specific Bi… 15-19 ye… Hispanic              \n 5 2024 Q1            Birth R… Age-specific Bi… 15-19 ye… Non-Hispanic Black    \n 6 2024 Q1            Birth R… Age-specific Bi… 15-19 ye… Non-Hispanic White    \n 7 2024 Q1            Birth R… Age-specific Bi… 20-24 ye… Hispanic              \n 8 2024 Q1            Birth R… Age-specific Bi… 20-24 ye… Non-Hispanic Black    \n 9 2024 Q1            Birth R… Age-specific Bi… 20-24 ye… Non-Hispanic White    \n10 2024 Q1            Birth R… Age-specific Bi… 25-29 ye… Hispanic              \n# ℹ 665 more rows\n# ℹ abbreviated name: ¹​`Race Ethnicity Category`\n# ℹ 4 more variables: Rate &lt;dbl&gt;, Unit &lt;chr&gt;, Significant &lt;chr&gt;,\n#   Significance_Status &lt;dbl&gt;\n\nglimpse(filtered_race)\n\nRows: 675\nColumns: 9\n$ `Year and Quarter`        &lt;chr&gt; \"2024 Q1\", \"2024 Q1\", \"2024 Q1\", \"2024 Q1\", …\n$ Topic                     &lt;chr&gt; \"Birth Rates\", \"Birth Rates\", \"Birth Rates\",…\n$ `Topic Subgroup`          &lt;chr&gt; \"Age-specific Birth Rates\", \"Age-specific Bi…\n$ Indicator                 &lt;chr&gt; \"10-14 years\", \"10-14 years\", \"10-14 years\",…\n$ `Race Ethnicity Category` &lt;chr&gt; \"Hispanic\", \"Non-Hispanic Black\", \"Non-Hispa…\n$ Rate                      &lt;dbl&gt; 0.3, 0.3, 0.1, 21.3, 19.1, 8.5, 78.3, 65.3, …\n$ Unit                      &lt;chr&gt; \"per 1,000 population\", \"per 1,000 populatio…\n$ Significant               &lt;chr&gt; NA, \"*\", NA, NA, \"*\", \"*\", \"*\", \"*\", \"*\", \"*…\n$ Significance_Status       &lt;dbl&gt; NA, 1, NA, NA, 1, 1, 1, 1, 1, 1, 1, 1, NA, 1…\n\n\nWe can see that the numbers have clearly been swapped around for the Rate column. Now, we can create the same plots Emma did on our scrambled set and see how things have changed.\n\nbirth_rate_bar2 &lt;- filtered_copy %&gt;%\n  group_by(`Year and Quarter`) %&gt;%\n  filter(Topic == \"Birth Rates\") %&gt;% \n  ggplot(aes(x = interaction(Indicator, `Race Ethnicity Category`), y = Rate, fill = `Race Ethnicity Category`)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = \"Birth Rate Rate by Age Category and Race\",\n       x = \"Age Category / Race\",\n       y = \"Rate\") +\n  scale_x_discrete(labels = function(x) gsub(\"\\\\.\", \"-\", x)) +  \n  theme(axis.text.x = element_text(angle = 60, hjust = 1))  \n\nhispanic_rate_bar2 &lt;- filtered_copy %&gt;%\n  filter(`Race Ethnicity Category` == \"Hispanic\") %&gt;%\n  filter(Topic == \"Birth Rates\") %&gt;%\n  group_by(`Year and Quarter`) %&gt;%\n  ggplot(aes(x = interaction(Indicator, `Race Ethnicity Category`), y = Rate, fill = `Race Ethnicity Category`)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = \"Birth Rate Rate by Age Category and Race\",\n       x = \"Age Category / Race\",\n       y = \"Rate\") +\n  scale_x_discrete(labels = function(x) gsub(\"\\\\.\", \"-\", x)) +  \n  theme(axis.text.x = element_text(angle = 60, hjust = 1)) \n\nwhite_rate_bar2 &lt;- filtered_copy %&gt;%\n  filter(`Race Ethnicity Category` == \"Non-Hispanic White\") %&gt;%\n  filter(Topic == \"Birth Rates\") %&gt;%\n  group_by(`Year and Quarter`) %&gt;%\n  ggplot(aes(x = interaction(Indicator, `Race Ethnicity Category`), y = Rate)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = \"Birth Rate Rate by Age Category and Race\",\n       x = \"Age Category / Race\",\n       y = \"Rate\") +\n  scale_x_discrete(labels = function(x) gsub(\"\\\\.\", \"-\", x)) +  \n  theme(axis.text.x = element_text(angle = 60, hjust = 1)) +\n  scale_color_viridis_d()\n\nblack_rate_bar2 &lt;- filtered_copy %&gt;%\n  filter(`Race Ethnicity Category` == \"Non-Hispanic Black\") %&gt;%\n  filter(Topic == \"Birth Rates\") %&gt;%\n  group_by(`Year and Quarter`) %&gt;%\n  ggplot(aes(x = interaction(Indicator, `Race Ethnicity Category`), y = Rate)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = \"Birth Rate Rate by Age Category and Race\",\n       x = \"Age Category / Race\",\n       y = \"Rate\") +\n  scale_x_discrete(labels = function(x) gsub(\"\\\\.\", \"-\", x)) +  \n  scale_color_viridis_b() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) \n\n#compare new to original\nprint(hispanic_rate_bar2)\n\n\n\n\n\n\n\nprint(black_rate_bar2)\n\n\n\n\n\n\n\nprint(white_rate_bar2)\n\n\n\n\n\n\n\nprint(hispanic_rate_bar)\n\n\n\n\n\n\n\nprint(black_rate_bar)\n\n\n\n\n\n\n\nprint(white_rate_bar)\n\n\n\n\n\n\n\n\nWe can see that these distributions are very different, yet the structure of the data is the same. Scrambling the rates has totally changed the analysis we produce; the data has gone from a relatively normal distribution from the original dataset to a pretty random distribution in the scrambled data. Let’s look at the other plots.\n\nlow_birth2 &lt;- filtered_copy %&gt;%\n  filter(`Topic Subgroup` == \"Low Birthweight Rates\") %&gt;%\n  group_by(`Race Ethnicity Category`) %&gt;%\n  ggplot(aes(x = interaction(Indicator, `Race Ethnicity Category`), y = Rate, fill = `Race Ethnicity Category`)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = \"Low Birthweight Rates by Race\",\n       x = \"Age Category / Race\",\n       y = \"Rate\") +\n  scale_x_discrete(labels = function(x) gsub(\"\\\\.\", \"-\", x)) +  \n  scale_color_identity() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) \nprint(low_birth2)\n\n\n\n\n\n\n\nprint(low_birth)\n\n\n\n\n\n\n\n\nThis one wasn’t changed as dramatically, but the distribution has gone from normal to skewed. Let’s look at the preterm birthrate data now.\n\npre_birth2 &lt;- filtered_copy %&gt;%\n  filter(`Topic Subgroup` == \"Preterm Birth Rates\") %&gt;%\n  group_by(`Race Ethnicity Category`) %&gt;%\n  ggplot(aes(x = interaction(Indicator, `Race Ethnicity Category`), y = Rate, fill = `Race Ethnicity Category`)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = \"Preterm Birth Rates by Race\",\n       x = \"Race\",\n       y = \"Rate\") +\n  scale_x_discrete(labels = function(x) gsub(\"\\\\.\", \"-\", x)) +  \n  scale_color_identity() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) \n\nprint(pre_birth2)\n\n\n\n\n\n\n\nprint(pre_birth)\n\n\n\n\n\n\n\n\nNow, the data makes no sense in the scrambled set. Late preterms are higher than total preterms in Hispanic and Black data, where early and late are far higher than total in the hispanic white data. The original set followed a much more logical pattern. Let’s recreate the NICU admission plots.\n\nNICU2 &lt;- filtered_copy %&gt;%\n  filter(`Topic Subgroup` == \"NICU Admission Rates\") %&gt;%\n  group_by(`Race Ethnicity Category`) %&gt;%\n  ggplot(aes(x = interaction(Indicator, `Race Ethnicity Category`), y = Rate, fill = `Race Ethnicity Category`)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = \"NICU Admission Rates by Age Category and Race\",\n       x = \"Race\",\n       y = \"Rate\") +\n  scale_x_discrete(labels = function(x) gsub(\"\\\\.\", \"-\", x)) +  \n  scale_color_identity() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) \n\nprint(NICU2)\n\n\n\n\n\n\n\nprint(NICU)\n\n\n\n\n\n\n\n\nWe can see that the rates are far higher in the scrambled data than the original data. The distribution has also changed, with White NICU Admissions being much higher than the original set. Let’s explore the last plot’s differences.\n\nteen_birth2 &lt;- filtered_copy %&gt;%\n  filter(`Topic Subgroup` == \"Teen Birth Rates\") %&gt;%\n  group_by(`Race Ethnicity Category`) %&gt;%\n  ggplot(aes(x = interaction(Indicator, `Race Ethnicity Category`), y = Rate, fill = `Race Ethnicity Category`)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = \" Teen Birth Rate Rate by Age Category and Race\",\n       x = \"Age Category / Race\",\n       y = \"Rate\") +\n  scale_x_discrete(labels = function(x) gsub(\"\\\\.\", \"-\", x)) +  \n  scale_color_viridis_b() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) \n\nprint(teen_birth2)\n\n\n\n\n\n\n\nprint(teen_birth)\n\n\n\n\n\n\n\n\nThe data is completely different in the scrambled set than the original. All of these changes are to be expected as we scrambled the dataset to create synthetic data instead of replicating it."
  },
  {
    "objectID": "presentation-exercise/visualization-exercise.html",
    "href": "presentation-exercise/visualization-exercise.html",
    "title": "Visualization Exercise",
    "section": "",
    "text": "Assignment\nHere are some of the AI prompts and results from the Presentation Exercise\n\n\nPackages\n\nlibrary(tidymodels)\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.2.0 ──\n\n\n✔ broom        1.0.6     ✔ recipes      1.1.0\n✔ dials        1.3.0     ✔ rsample      1.2.1\n✔ dplyr        1.1.4     ✔ tibble       3.2.1\n✔ ggplot2      3.5.1     ✔ tidyr        1.3.1\n✔ infer        1.0.7     ✔ tune         1.2.1\n✔ modeldata    1.4.0     ✔ workflows    1.1.4\n✔ parsnip      1.2.1     ✔ workflowsets 1.1.0\n✔ purrr        1.0.2     ✔ yardstick    1.3.1\n\n\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ purrr::discard() masks scales::discard()\n✖ dplyr::filter()  masks stats::filter()\n✖ dplyr::lag()     masks stats::lag()\n✖ recipes::step()  masks stats::step()\n• Search for functions across packages at https://www.tidymodels.org/find/\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats   1.0.0     ✔ readr     2.1.5\n✔ lubridate 1.9.3     ✔ stringr   1.5.1\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ readr::col_factor() masks scales::col_factor()\n✖ purrr::discard()    masks scales::discard()\n✖ dplyr::filter()     masks stats::filter()\n✖ stringr::fixed()    masks recipes::fixed()\n✖ dplyr::lag()        masks stats::lag()\n✖ readr::spec()       masks yardstick::spec()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggplot2)\nlibrary(plotly)\n\n\nAttaching package: 'plotly'\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\nThe following object is masked from 'package:stats':\n\n    filter\n\nThe following object is masked from 'package:graphics':\n\n    layout\n\nlibrary(knitr)\nlibrary(kableExtra)\n\n\nAttaching package: 'kableExtra'\n\nThe following object is masked from 'package:dplyr':\n\n    group_rows\n\nlibrary(gt)\nlibrary(reshape2)\n\n\nAttaching package: 'reshape2'\n\nThe following object is masked from 'package:tidyr':\n\n    smiths\n\n\n\n\nSpurious Correlation Table\nAfter copying & pasting the Table contents and the contents from my final dataframe, I asked ChatGPT the following prompt: “I want to use an R package to create a publication-level quality table using the table I provided as well as the dataset”. Below is the code that Chat GPT provided me:\n\n# Load required libraries\nlibrary(knitr)\nlibrary(kableExtra)\n\n# Create a dataframe with your data\ndf &lt;- data.frame(\n  Eating_or_Drinking = c(\"Egg rolls\", \"Soda\", \"Shellfish\", \"Lemonade\", \"Shellfish\", \"Fried/breaded fish\", \"Beer\", \"Table salt\", \"Coffee\", \"Energy drinks\", \"Lemonade\", \"Steak with fat trimmed\", \"Iced tea\", \"Iced tea\", \"Raw tomatoes\", \"Cabbage\"),\n  Linked_to = c(\"Dog ownership\", \"Weird rash in the past year\", \"Right-handedness\", \"Belief that 'Crash' deserved to win best picture\", \"Left-handedness\", \"Democratic Party affiliation\", \"Frequent smoking\", \"Positive relationship with Internet service provider\", \"Cat ownership\", \"Frequent smoking\", \"Frequent smoking\", \"Lack of belief in a god\", \"Belief that 'Crash' didn't deserve to win best picture\", \"Dog ownership\", \"Judaism\", \"Innie bellybutton\"),\n  P_Value = c(2.84762e-05, 1.77172e-04, 2.03126e-04, 2.40925e-04, 3.52826e-04, 7.35258e-04, 1.28534e-03, 1.40221e-03, 1.63035e-03, 1.88478e-03, 2.61039e-03, 2.96707e-03, 4.26540e-03, 4.58258e-03, 6.28035e-03, 9.68729e-03)\n)\n\n# Create a kable table\nkable_table &lt;- df %&gt;%\n  kable(format = \"html\", escape = FALSE) %&gt;%\n  kable_styling(full_width = FALSE)\n\n# Print the table\nprint(kable_table)\n\n&lt;table class=\"table\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\"&gt;\n &lt;thead&gt;\n  &lt;tr&gt;\n   &lt;th style=\"text-align:left;\"&gt; Eating_or_Drinking &lt;/th&gt;\n   &lt;th style=\"text-align:left;\"&gt; Linked_to &lt;/th&gt;\n   &lt;th style=\"text-align:right;\"&gt; P_Value &lt;/th&gt;\n  &lt;/tr&gt;\n &lt;/thead&gt;\n&lt;tbody&gt;\n  &lt;tr&gt;\n   &lt;td style=\"text-align:left;\"&gt; Egg rolls &lt;/td&gt;\n   &lt;td style=\"text-align:left;\"&gt; Dog ownership &lt;/td&gt;\n   &lt;td style=\"text-align:right;\"&gt; 0.0000285 &lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n   &lt;td style=\"text-align:left;\"&gt; Soda &lt;/td&gt;\n   &lt;td style=\"text-align:left;\"&gt; Weird rash in the past year &lt;/td&gt;\n   &lt;td style=\"text-align:right;\"&gt; 0.0001772 &lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n   &lt;td style=\"text-align:left;\"&gt; Shellfish &lt;/td&gt;\n   &lt;td style=\"text-align:left;\"&gt; Right-handedness &lt;/td&gt;\n   &lt;td style=\"text-align:right;\"&gt; 0.0002031 &lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n   &lt;td style=\"text-align:left;\"&gt; Lemonade &lt;/td&gt;\n   &lt;td style=\"text-align:left;\"&gt; Belief that 'Crash' deserved to win best picture &lt;/td&gt;\n   &lt;td style=\"text-align:right;\"&gt; 0.0002409 &lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n   &lt;td style=\"text-align:left;\"&gt; Shellfish &lt;/td&gt;\n   &lt;td style=\"text-align:left;\"&gt; Left-handedness &lt;/td&gt;\n   &lt;td style=\"text-align:right;\"&gt; 0.0003528 &lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n   &lt;td style=\"text-align:left;\"&gt; Fried/breaded fish &lt;/td&gt;\n   &lt;td style=\"text-align:left;\"&gt; Democratic Party affiliation &lt;/td&gt;\n   &lt;td style=\"text-align:right;\"&gt; 0.0007353 &lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n   &lt;td style=\"text-align:left;\"&gt; Beer &lt;/td&gt;\n   &lt;td style=\"text-align:left;\"&gt; Frequent smoking &lt;/td&gt;\n   &lt;td style=\"text-align:right;\"&gt; 0.0012853 &lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n   &lt;td style=\"text-align:left;\"&gt; Table salt &lt;/td&gt;\n   &lt;td style=\"text-align:left;\"&gt; Positive relationship with Internet service provider &lt;/td&gt;\n   &lt;td style=\"text-align:right;\"&gt; 0.0014022 &lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n   &lt;td style=\"text-align:left;\"&gt; Coffee &lt;/td&gt;\n   &lt;td style=\"text-align:left;\"&gt; Cat ownership &lt;/td&gt;\n   &lt;td style=\"text-align:right;\"&gt; 0.0016304 &lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n   &lt;td style=\"text-align:left;\"&gt; Energy drinks &lt;/td&gt;\n   &lt;td style=\"text-align:left;\"&gt; Frequent smoking &lt;/td&gt;\n   &lt;td style=\"text-align:right;\"&gt; 0.0018848 &lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n   &lt;td style=\"text-align:left;\"&gt; Lemonade &lt;/td&gt;\n   &lt;td style=\"text-align:left;\"&gt; Frequent smoking &lt;/td&gt;\n   &lt;td style=\"text-align:right;\"&gt; 0.0026104 &lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n   &lt;td style=\"text-align:left;\"&gt; Steak with fat trimmed &lt;/td&gt;\n   &lt;td style=\"text-align:left;\"&gt; Lack of belief in a god &lt;/td&gt;\n   &lt;td style=\"text-align:right;\"&gt; 0.0029671 &lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n   &lt;td style=\"text-align:left;\"&gt; Iced tea &lt;/td&gt;\n   &lt;td style=\"text-align:left;\"&gt; Belief that 'Crash' didn't deserve to win best picture &lt;/td&gt;\n   &lt;td style=\"text-align:right;\"&gt; 0.0042654 &lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n   &lt;td style=\"text-align:left;\"&gt; Iced tea &lt;/td&gt;\n   &lt;td style=\"text-align:left;\"&gt; Dog ownership &lt;/td&gt;\n   &lt;td style=\"text-align:right;\"&gt; 0.0045826 &lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n   &lt;td style=\"text-align:left;\"&gt; Raw tomatoes &lt;/td&gt;\n   &lt;td style=\"text-align:left;\"&gt; Judaism &lt;/td&gt;\n   &lt;td style=\"text-align:right;\"&gt; 0.0062803 &lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n   &lt;td style=\"text-align:left;\"&gt; Cabbage &lt;/td&gt;\n   &lt;td style=\"text-align:left;\"&gt; Innie bellybutton &lt;/td&gt;\n   &lt;td style=\"text-align:right;\"&gt; 0.0096873 &lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/tbody&gt;\n&lt;/table&gt;\n\n\nUnfortunately, the table didn’t print. I am assuming this is due to the faact that kableExtra renders HTML tables. I am now going to prompt ChatGPT again to use another package. After asking ChatGPT to use another package, the following code was provided using the gt() package.\n\n# Load required libraries\nlibrary(gt)\n\n# Create a dataframe with your data\ndf &lt;- data.frame(\n  Eating_or_Drinking = c(\"Egg rolls\", \"Soda\", \"Shellfish\", \"Lemonade\", \"Shellfish\", \"Fried/breaded fish\", \"Beer\", \"Table salt\", \"Coffee\", \"Energy drinks\", \"Lemonade\", \"Steak with fat trimmed\", \"Iced tea\", \"Iced tea\", \"Raw tomatoes\", \"Cabbage\"),\n  Linked_to = c(\"Dog ownership\", \"Weird rash in the past year\", \"Right-handedness\", \"Belief that 'Crash' deserved to win best picture\", \"Left-handedness\", \"Democratic Party affiliation\", \"Frequent smoking\", \"Positive relationship with Internet service provider\", \"Cat ownership\", \"Frequent smoking\", \"Frequent smoking\", \"Lack of belief in a god\", \"Belief that 'Crash' didn't deserve to win best picture\", \"Dog ownership\", \"Judaism\", \"Innie bellybutton\"),\n  P_Value = c(2.84762e-05, 1.77172e-04, 2.03126e-04, 2.40925e-04, 3.52826e-04, 7.35258e-04, 1.28534e-03, 1.40221e-03, 1.63035e-03, 1.88478e-03, 2.61039e-03, 2.96707e-03, 4.26540e-03, 4.58258e-03, 6.28035e-03, 9.68729e-03)\n)\n\n# Create a gt table\ngt_table &lt;- df %&gt;%\n  gt() %&gt;%\n  tab_header(\n    title = \"Eating or Drinking Linked Characteristics\",\n    subtitle = \"Association and P-Values\"\n  ) %&gt;%\n  fmt_number(\n    columns = vars(P_Value),\n    decimals = 4\n  ) %&gt;%\n  tab_spanner(\n    label = \"Linked to\",\n    columns = c(Linked_to, P_Value)\n  )\n\nWarning: Since gt v0.3.0, `columns = vars(...)` has been deprecated.\n• Please use `columns = c(...)` instead.\n\n# Print the table\nprint(gt_table)\n\n&lt;div id=\"ewztpnpyyc\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\"&gt;\n  &lt;style&gt;#ewztpnpyyc table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#ewztpnpyyc thead, #ewztpnpyyc tbody, #ewztpnpyyc tfoot, #ewztpnpyyc tr, #ewztpnpyyc td, #ewztpnpyyc th {\n  border-style: none;\n}\n\n#ewztpnpyyc p {\n  margin: 0;\n  padding: 0;\n}\n\n#ewztpnpyyc .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#ewztpnpyyc .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#ewztpnpyyc .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#ewztpnpyyc .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#ewztpnpyyc .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#ewztpnpyyc .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#ewztpnpyyc .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#ewztpnpyyc .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#ewztpnpyyc .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#ewztpnpyyc .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#ewztpnpyyc .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#ewztpnpyyc .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#ewztpnpyyc .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#ewztpnpyyc .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#ewztpnpyyc .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#ewztpnpyyc .gt_from_md &gt; :first-child {\n  margin-top: 0;\n}\n\n#ewztpnpyyc .gt_from_md &gt; :last-child {\n  margin-bottom: 0;\n}\n\n#ewztpnpyyc .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#ewztpnpyyc .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#ewztpnpyyc .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#ewztpnpyyc .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#ewztpnpyyc .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#ewztpnpyyc .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#ewztpnpyyc .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#ewztpnpyyc .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#ewztpnpyyc .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#ewztpnpyyc .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#ewztpnpyyc .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#ewztpnpyyc .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#ewztpnpyyc .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#ewztpnpyyc .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#ewztpnpyyc .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#ewztpnpyyc .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#ewztpnpyyc .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#ewztpnpyyc .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#ewztpnpyyc .gt_left {\n  text-align: left;\n}\n\n#ewztpnpyyc .gt_center {\n  text-align: center;\n}\n\n#ewztpnpyyc .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#ewztpnpyyc .gt_font_normal {\n  font-weight: normal;\n}\n\n#ewztpnpyyc .gt_font_bold {\n  font-weight: bold;\n}\n\n#ewztpnpyyc .gt_font_italic {\n  font-style: italic;\n}\n\n#ewztpnpyyc .gt_super {\n  font-size: 65%;\n}\n\n#ewztpnpyyc .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#ewztpnpyyc .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#ewztpnpyyc .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#ewztpnpyyc .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#ewztpnpyyc .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#ewztpnpyyc .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#ewztpnpyyc .gt_indent_5 {\n  text-indent: 25px;\n}\n\n#ewztpnpyyc .katex-display {\n  display: inline-flex !important;\n  margin-bottom: 0.75em !important;\n}\n\n#ewztpnpyyc div.Reactable &gt; div.rt-table &gt; div.rt-thead &gt; div.rt-tr.rt-tr-group-header &gt; div.rt-th-group:after {\n  height: 0px !important;\n}\n&lt;/style&gt;\n  &lt;table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\"&gt;\n  &lt;thead&gt;\n    &lt;tr class=\"gt_heading\"&gt;\n      &lt;td colspan=\"3\" class=\"gt_heading gt_title gt_font_normal\" style&gt;Eating or Drinking Linked Characteristics&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr class=\"gt_heading\"&gt;\n      &lt;td colspan=\"3\" class=\"gt_heading gt_subtitle gt_font_normal gt_bottom_border\" style&gt;Association and P-Values&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr class=\"gt_col_headings gt_spanner_row\"&gt;\n      &lt;th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"2\" colspan=\"1\" scope=\"col\" id=\"Eating_or_Drinking\"&gt;Eating_or_Drinking&lt;/th&gt;\n      &lt;th class=\"gt_center gt_columns_top_border gt_column_spanner_outer\" rowspan=\"1\" colspan=\"2\" scope=\"colgroup\" id=\"Linked to\"&gt;\n        &lt;span class=\"gt_column_spanner\"&gt;Linked to&lt;/span&gt;\n      &lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr class=\"gt_col_headings\"&gt;\n      &lt;th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Linked_to\"&gt;Linked_to&lt;/th&gt;\n      &lt;th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"P_Value\"&gt;P_Value&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody class=\"gt_table_body\"&gt;\n    &lt;tr&gt;&lt;td headers=\"Eating_or_Drinking\" class=\"gt_row gt_left\"&gt;Egg rolls&lt;/td&gt;\n&lt;td headers=\"Linked_to\" class=\"gt_row gt_left\"&gt;Dog ownership&lt;/td&gt;\n&lt;td headers=\"P_Value\" class=\"gt_row gt_right\"&gt;0.0000&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td headers=\"Eating_or_Drinking\" class=\"gt_row gt_left\"&gt;Soda&lt;/td&gt;\n&lt;td headers=\"Linked_to\" class=\"gt_row gt_left\"&gt;Weird rash in the past year&lt;/td&gt;\n&lt;td headers=\"P_Value\" class=\"gt_row gt_right\"&gt;0.0002&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td headers=\"Eating_or_Drinking\" class=\"gt_row gt_left\"&gt;Shellfish&lt;/td&gt;\n&lt;td headers=\"Linked_to\" class=\"gt_row gt_left\"&gt;Right-handedness&lt;/td&gt;\n&lt;td headers=\"P_Value\" class=\"gt_row gt_right\"&gt;0.0002&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td headers=\"Eating_or_Drinking\" class=\"gt_row gt_left\"&gt;Lemonade&lt;/td&gt;\n&lt;td headers=\"Linked_to\" class=\"gt_row gt_left\"&gt;Belief that 'Crash' deserved to win best picture&lt;/td&gt;\n&lt;td headers=\"P_Value\" class=\"gt_row gt_right\"&gt;0.0002&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td headers=\"Eating_or_Drinking\" class=\"gt_row gt_left\"&gt;Shellfish&lt;/td&gt;\n&lt;td headers=\"Linked_to\" class=\"gt_row gt_left\"&gt;Left-handedness&lt;/td&gt;\n&lt;td headers=\"P_Value\" class=\"gt_row gt_right\"&gt;0.0004&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td headers=\"Eating_or_Drinking\" class=\"gt_row gt_left\"&gt;Fried/breaded fish&lt;/td&gt;\n&lt;td headers=\"Linked_to\" class=\"gt_row gt_left\"&gt;Democratic Party affiliation&lt;/td&gt;\n&lt;td headers=\"P_Value\" class=\"gt_row gt_right\"&gt;0.0007&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td headers=\"Eating_or_Drinking\" class=\"gt_row gt_left\"&gt;Beer&lt;/td&gt;\n&lt;td headers=\"Linked_to\" class=\"gt_row gt_left\"&gt;Frequent smoking&lt;/td&gt;\n&lt;td headers=\"P_Value\" class=\"gt_row gt_right\"&gt;0.0013&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td headers=\"Eating_or_Drinking\" class=\"gt_row gt_left\"&gt;Table salt&lt;/td&gt;\n&lt;td headers=\"Linked_to\" class=\"gt_row gt_left\"&gt;Positive relationship with Internet service provider&lt;/td&gt;\n&lt;td headers=\"P_Value\" class=\"gt_row gt_right\"&gt;0.0014&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td headers=\"Eating_or_Drinking\" class=\"gt_row gt_left\"&gt;Coffee&lt;/td&gt;\n&lt;td headers=\"Linked_to\" class=\"gt_row gt_left\"&gt;Cat ownership&lt;/td&gt;\n&lt;td headers=\"P_Value\" class=\"gt_row gt_right\"&gt;0.0016&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td headers=\"Eating_or_Drinking\" class=\"gt_row gt_left\"&gt;Energy drinks&lt;/td&gt;\n&lt;td headers=\"Linked_to\" class=\"gt_row gt_left\"&gt;Frequent smoking&lt;/td&gt;\n&lt;td headers=\"P_Value\" class=\"gt_row gt_right\"&gt;0.0019&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td headers=\"Eating_or_Drinking\" class=\"gt_row gt_left\"&gt;Lemonade&lt;/td&gt;\n&lt;td headers=\"Linked_to\" class=\"gt_row gt_left\"&gt;Frequent smoking&lt;/td&gt;\n&lt;td headers=\"P_Value\" class=\"gt_row gt_right\"&gt;0.0026&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td headers=\"Eating_or_Drinking\" class=\"gt_row gt_left\"&gt;Steak with fat trimmed&lt;/td&gt;\n&lt;td headers=\"Linked_to\" class=\"gt_row gt_left\"&gt;Lack of belief in a god&lt;/td&gt;\n&lt;td headers=\"P_Value\" class=\"gt_row gt_right\"&gt;0.0030&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td headers=\"Eating_or_Drinking\" class=\"gt_row gt_left\"&gt;Iced tea&lt;/td&gt;\n&lt;td headers=\"Linked_to\" class=\"gt_row gt_left\"&gt;Belief that 'Crash' didn't deserve to win best picture&lt;/td&gt;\n&lt;td headers=\"P_Value\" class=\"gt_row gt_right\"&gt;0.0043&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td headers=\"Eating_or_Drinking\" class=\"gt_row gt_left\"&gt;Iced tea&lt;/td&gt;\n&lt;td headers=\"Linked_to\" class=\"gt_row gt_left\"&gt;Dog ownership&lt;/td&gt;\n&lt;td headers=\"P_Value\" class=\"gt_row gt_right\"&gt;0.0046&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td headers=\"Eating_or_Drinking\" class=\"gt_row gt_left\"&gt;Raw tomatoes&lt;/td&gt;\n&lt;td headers=\"Linked_to\" class=\"gt_row gt_left\"&gt;Judaism&lt;/td&gt;\n&lt;td headers=\"P_Value\" class=\"gt_row gt_right\"&gt;0.0063&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td headers=\"Eating_or_Drinking\" class=\"gt_row gt_left\"&gt;Cabbage&lt;/td&gt;\n&lt;td headers=\"Linked_to\" class=\"gt_row gt_left\"&gt;Innie bellybutton&lt;/td&gt;\n&lt;td headers=\"P_Value\" class=\"gt_row gt_right\"&gt;0.0097&lt;/td&gt;&lt;/tr&gt;\n  &lt;/tbody&gt;\n  \n  \n&lt;/table&gt;\n&lt;/div&gt;\n\n\nThe code ChatGPT provided left me with the following warning:\n“Warning: Since gt v0.3.0, columns = vars(...) has been deprecated. • Please use columns = c(...) instead.Warning: Since gt v0.3.0, columns = vars(...) has been deprecated. • Please use columns = c(...) instead.”\nHere was ChatGPT’s solution:\n\n# Create a gt table directly\ngt_table &lt;- df %&gt;%\n  gt() %&gt;%\n  tab_header(\n    title = \"Eating or Drinking Linked Characteristics\",\n    subtitle = \"Association and P-Values\"\n  ) %&gt;%\n  fmt_number(\n    columns = c(\"P_Value\"),\n    decimals = 4\n  ) %&gt;%\n  tab_spanner(\n    label = \"Linked to\",\n    columns = c(\"Linked_to\", \"P_Value\")\n  )\n\n# Print the table\ngt_table\n\n\n\n\n\n\n\nEating or Drinking Linked Characteristics\n\n\nAssociation and P-Values\n\n\nEating_or_Drinking\nLinked to\n\n\nLinked_to\nP_Value\n\n\n\n\nEgg rolls\nDog ownership\n0.0000\n\n\nSoda\nWeird rash in the past year\n0.0002\n\n\nShellfish\nRight-handedness\n0.0002\n\n\nLemonade\nBelief that 'Crash' deserved to win best picture\n0.0002\n\n\nShellfish\nLeft-handedness\n0.0004\n\n\nFried/breaded fish\nDemocratic Party affiliation\n0.0007\n\n\nBeer\nFrequent smoking\n0.0013\n\n\nTable salt\nPositive relationship with Internet service provider\n0.0014\n\n\nCoffee\nCat ownership\n0.0016\n\n\nEnergy drinks\nFrequent smoking\n0.0019\n\n\nLemonade\nFrequent smoking\n0.0026\n\n\nSteak with fat trimmed\nLack of belief in a god\n0.0030\n\n\nIced tea\nBelief that 'Crash' didn't deserve to win best picture\n0.0043\n\n\nIced tea\nDog ownership\n0.0046\n\n\nRaw tomatoes\nJudaism\n0.0063\n\n\nCabbage\nInnie bellybutton\n0.0097\n\n\n\n\n\n\n\n\n\nTerrorism Graph\nI provided ChatGPT with the csv file contents, as well as a verbal description of what I wanted to recreate. Here was ChatGPT’s original response:\n\neu_terrorism_fatalities_by_country &lt;- read.csv(\"~/Desktop/Completed/CPH_Spring24/BIOS8060E/emmahardinparker-MADA-portfolio/presentation-exercise/eu_terrorism_fatalities_by_country.csv\") \n# Combine columns for France\nFrance &lt;- eu_terrorism_fatalities_by_country$France\n\n# Combine columns for the rest of the EU\nEU &lt;- rowSums(eu_terrorism_fatalities_by_country[, c(\"Belgium\", \"Denmark\", \"Germany\", \"Greece\", \"Ireland\",\n                               \"Italy\", \"Luxembourg\", \"Netherlands\", \"Portugal\", \"Spain\",\n                               \"United.Kingdom\")])\n\ncombined_data &lt;- data.frame(Year = eu_terrorism_fatalities_by_country$iyear, France = France, EU = EU)\n\n# Reshape the data for plotting\ncombined_data_long &lt;- reshape2::melt(combined_data, id.vars = \"Year\", variable.name = \"Group\", value.name = \"Deaths\")\n# Plot the density plot\nggplot(combined_data_long, aes(x = Year, y = Deaths, color = Group, group = Group)) +\n  geom_line() +\n  labs(title = \"Comparison of Deaths between France and EU\",\n       x = \"Year\",\n       y = \"Number of Deaths\",\n       color = \"Group\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\nThis is a great start, but not exactly what I want. I am now going to ask ChatGPT to fill each of the density curves with a specific color, remove the legends, and change the order of the x-axis.\n\n# Plot the line plot\nggplot(combined_data_long, aes(x = Year, y = Deaths, color = Group, group = Group, fill = Group)) +\n  geom_line() +\n  geom_area(alpha = 0.5) +\n  scale_fill_manual(values = c(\"darkorange\", \"peachpuff\")) +\n  scale_color_manual(values = c(\"darkorange\", \"black\")) +\n  labs(title = \"Previous Terrorism Deaths in France & the EU\",\n       subtitle = \"European Union member countries as of 1986\",\n       x = \"Year\",\n       y = \"Number of Deaths\",\n       color = \"Group\",\n       fill = \"Group\") +\n  theme_minimal() +\n  scale_x_continuous(breaks = c(1970, 1975, 1980, 1985, 1990, 1995, 2000, 2005, 2010),\n                     labels = c(\"'70\", \"'75\", \"'80\", \"'85\", \"'90\", \"'95\", 2000, \"'05\", \"'10\")) +\n  geom_label(aes(x = 2004, y = max(combined_data_long$Deaths), label = \"2004 Madrid Train Bombings\"), \n             color = \"black\", fill = \"white\", size = 4,\n             label.padding = unit(0.5, \"lines\"),\n             label.size = 0)\n\nWarning: Use of `combined_data_long$Deaths` is discouraged.\nℹ Use `Deaths` instead.\n\n\n\n\n\n\n\n\n\nI asked ChatGPT to adjust the fill of the graph. Here was the corresponding code:\n\n# Plot the line plot\nggplot(combined_data_long, aes(x = Year, y = Deaths, color = Group, group = Group, fill = Group)) +\n  geom_line() +\n  geom_area(data = filter(combined_data_long, Group == \"France\"), alpha = 0.5, fill = \"darkorange\") +\n  geom_area(data = filter(combined_data_long, Group == \"EU\"), alpha = 0.5, fill = \"peachpuff\") +\n  scale_fill_manual(values = c(\"darkorange\", \"peachpuff\")) +\n  scale_color_manual(values = c(\"darkorange\", \"black\")) +\n  labs(title = \"Previous Terrorism Deaths in France & the EU\",\n       subtitle = \"European Union member countries as of 1986\",\n       x = \"Year\",\n       y = \"Number of Deaths\",\n       color = \"Group\",\n       fill = \"Group\") +\n  theme_minimal() +\n  scale_x_continuous(breaks = c(1970, 1975, 1980, 1985, 1990, 1995, 2000, 2005, 2010),\n                     labels = c(\"'70\", \"'75\", \"'80\", \"'85\", \"'90\", \"'95\", 2000, \"'05\", \"'10\")) +\n  geom_label(aes(x = 2004, y = max(combined_data_long$Deaths), label = \"2004 Madrid Train Bombings\"), \n             color = \"black\", fill = \"white\", size = 4,\n             label.padding = unit(0.5, \"lines\"),\n             label.size = 0)\n\nWarning: Use of `combined_data_long$Deaths` is discouraged.\nℹ Use `Deaths` instead.\n\n\n\n\n\n\n\n\n\nWe’re getting closer! I asked ChatGPT to help me with labeling.\n\n# Calculate the maximum number of deaths and the corresponding year for France and the EU\nmax_deaths_France &lt;- max(combined_data_long$Deaths[combined_data_long$Group == \"France\"])\nyear_max_France &lt;- combined_data_long$Year[which.max(combined_data_long$Deaths[combined_data_long$Group == \"France\"])]\n\nmax_deaths_EU &lt;- max(combined_data_long$Deaths[combined_data_long$Group == \"EU\"])\nyear_max_EU &lt;- combined_data_long$Year[which.max(combined_data_long$Deaths[combined_data_long$Group == \"EU\"])]\n\n# Create a data frame for labels\nlabel_data &lt;- data.frame(\n  x = c(year_max_France, year_max_EU, 2004),\n  y = c(max_deaths_France, max_deaths_EU, max(max_deaths_France, max_deaths_EU)),\n  label = c(\"France\", \"European Union\", \"2004 Madrid Train Bombings\"),\n  color = c(\"darkorange\", \"black\", \"black\"),\n  fill = c(\"darkorange\", \"peachpuff\", NA),\n  hjust = c(1, 1, 0),  # Horizontal justification\n  vjust = c(0, 0, 1)  # Vertical justification\n)\n\n\n# Plot the line plot\nggplot(combined_data_long, aes(x = Year, y = Deaths, color = Group, fill = Group)) +\n  geom_line() +\n  geom_area(data = filter(combined_data_long, Group == \"France\"), alpha = 0.5, fill = \"darkorange\") +\n  geom_area(data = filter(combined_data_long, Group == \"EU\"), alpha = 0.5, fill = \"peachpuff\") +\n  scale_fill_manual(values = c(\"darkorange\", \"peachpuff\")) +\n  scale_color_manual(values = c(\"darkorange\", \"black\")) +\n  labs(title = \"Previous Terrorism Deaths in France & the EU\",\n       subtitle = \"European Union member countries as of 1986\",\n       x = \"Year\",\n       y = \"Number of Deaths\",\n       color = \"Group\",\n       fill = \"Group\") +\n  theme_minimal() +\n  scale_x_continuous(breaks = c(1970, 1975, 1980, 1985, 1990, 1995, 2000, 2005, 2010),\n                     labels = c(\"'70\", \"'75\", \"'80\", \"'85\", \"'90\", \"'95\", 2000, \"'05\", \"'10\")) +\n  geom_label(data = label_data, aes(x = x, y = y, label = label),\n             color = c(\"darkorange\", \"black\", \"black\"),\n             fill = c(\"darkorange\", \"peachpuff\", NA),\n             size = 4,\n             label.padding = unit(0.5, \"lines\"),\n             hjust = c(1, 1, 0),  # Horizontal justification\n             vjust = c(0, 0, 1))  # Vertical justification\n\n\n\n\n\n\n\n\nWe’re closer, but not quite.\n\n# Plot the line plot\nggplot(combined_data_long, aes(x = Year, y = Deaths, color = Group, fill = Group)) +\n  geom_line() +\n  geom_area(data = filter(combined_data_long, Group == \"France\"), alpha = 0.5, fill = \"salmon\") +\n  geom_area(data = filter(combined_data_long, Group == \"EU\"), alpha = 0.5, fill = \"dark salmon\") +\n  scale_fill_manual(values = c(\"salmon\", \"dark salmon\")) +\n  scale_color_manual(values = c(\"salmon\", \"black\")) +\n  labs(title = \"Previous Terrorism Deaths in France & the EU\",\n       subtitle = \"European Union member countries as of 1986\",\n       x = \"Year\",\n       y = \"Number of Deaths\",\n       color = \"Group\",\n       fill = \"Group\") +\n  theme_minimal() +\n  scale_x_continuous(breaks = c(1970, 1975, 1980, 1985, 1990, 1995, 2000, 2005, 2010),\n                     labels = c(\"'70\", \"'75\", \"'80\", \"'85\", \"'90\", \"'95\", 2000, \"'05\", \"'10\")) +\n  geom_label(data = label_data, aes(x = x, y = y, label = label),\n             color = c(\"salmon\", \"black\", \"black\"),\n             fill = c(\"salmon\", \"dark salmon\", NA),\n             size = 4,\n             label.padding = unit(0.5, \"lines\"),\n             hjust = c(1, 1, 0),  # Horizontal justification\n             vjust = c(0, 0, 1))  # Vertical justification\n\n\n\n\n\n\n\n\nNow, we need to continue to format the graph to make it easier to read.\n\n# Plot the line plot\nggplot(combined_data_long, aes(x = Year, y = Deaths, color = Group, fill = Group)) +\n  geom_line() +\n  geom_area(data = filter(combined_data_long, Group == \"France\"), alpha = 0.5, fill = \"salmon\") +\n  geom_area(data = filter(combined_data_long, Group == \"EU\"), alpha = 0.5, fill = \"dark salmon\") +\n  scale_fill_manual(values = c(\"salmon\", \"dark salmon\")) +\n  scale_color_manual(values = c(\"salmon\", \"black\")) +\n  labs(title = \"Previous Terrorism Deaths in France and the EU\",\n       subtitle = \"European Union member countries as of 1986\",\n       color = \"Group\",\n       fill = \"Group\") +\n  theme_minimal() +\n  scale_x_continuous(breaks = c(1970, 1975, 1980, 1985, 1990, 1995, 2000, 2005, 2010),\n                     labels = c(\"'70\", \"'75\", \"'80\", \"'85\", \"'90\", \"'95\", 2000, \"'05\", \"'10\")) +\n  geom_label(data = label_data, aes(x = x, y = y, label = label),\n             color = c(\"salmon\", \"black\", \"black\"),\n             fill = c(\"salmon\", \"dark salmon\", NA),\n             size = 4,\n             label.padding = unit(0.5, \"lines\"),\n             hjust = c(-1.5, 0.8, 0.5),  # Horizontal justification\n             vjust = c(-1, 0.5, 1))   # Vertical justification\n\n\n\n\n\n\n\n\nI am now going to make some manual edits to fix the final labeling issues.\n\n# Create a data frame for labels\nlabel_data &lt;- data.frame(\n  x = c(year_max_France, year_max_EU, 2004),\n  y = c(max_deaths_France, max_deaths_EU, max(max_deaths_France, max_deaths_EU)),\n  label = c(\"France\", \"European Union\", \"2004 Madrid Train Bombings\"),\n  Group = c(\"France\", \"EU\", \"Event\")\n)\n\n# Plot the line plot\nggplot(combined_data_long, aes(x = Year, y = Deaths, color = Group, fill = Group)) +\n  geom_line() +\n  geom_area(data = filter(combined_data_long, Group == \"France\"), alpha = 0.5, fill = \"salmon\") +\n  geom_area(data = filter(combined_data_long, Group == \"EU\"), alpha = 0.5, fill = \"dark salmon\") +\n  scale_fill_manual(values = c(\"France\" = \"salmon\", \"EU\" = \"dark salmon\"), guide = FALSE) +\n  scale_color_manual(values = c(\"France\" = \"salmon\", \"EU\" = \"black\")) +\n  labs(title = \"Previous Terrorism Deaths in France & the EU\",\n       subtitle = \"European Union member countries as of 1986\",\n       color = \"Group\",\n       fill = \"Group\") +\n  theme_minimal() +\n  scale_x_continuous(breaks = c(1970, 1975, 1980, 1985, 1990, 1995, 2000, 2005, 2010),\n                     labels = c(\"'70\", \"'75\", \"'80\", \"'85\", \"'90\", \"'95\", 2000, \"'05\", \"'10\")) +\n  annotate(\"text\", x = year_max_France, y = max_deaths_France, label = \"France\", color = \"salmon\",\n           size = 4, hjust = 1.2, vjust = -1) +\n  annotate(\"text\", x = year_max_EU, y = max_deaths_EU, label = \"European Union\", color = \"dark salmon\",\n           size = 4, hjust = 1.2, vjust = 1) +\n  annotate(\"text\", x = 2004, y = max(max_deaths_France, max_deaths_EU),\n           label = \"2004 Madrid Train Bombings\", color = \"black\", size = 4, hjust = 0.5, vjust = 12) +\n  guides(fill = FALSE)  # Hide the legend for labels\n\nWarning: The `&lt;scale&gt;` argument of `guides()` cannot be `FALSE`. Use \"none\" instead as\nof ggplot2 3.3.4."
  },
  {
    "objectID": "ml-models-exercise/ml-models-exercise.html",
    "href": "ml-models-exercise/ml-models-exercise.html",
    "title": "Machine Learning Models Exercise",
    "section": "",
    "text": "Loading required packages\n\nlibrary(tidymodels)\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(GGally)\nlibrary(corrplot) \nlibrary(glmnet)\nlibrary(ranger)\nlibrary(yardstick) \nlibrary(here)\n\nDefining a random number seed\n\nrngseed = 1234\n\nLoading the data\n\n# Specify the path to your RDS file\nrds_file &lt;- \"/Users/ehardinparker/Desktop/Completed/CPH_Spring24/BIOS8060E/emmahardinparker-MADA-portfolio/ml-models-exercise/data_with_race.rds\"\n\n# Use readRDS() to load the data from the RDS file\nrace_data &lt;- readRDS(here(rds_file))"
  },
  {
    "objectID": "ml-models-exercise/ml-models-exercise.html#first-model-linear-model-with-all-predictors",
    "href": "ml-models-exercise/ml-models-exercise.html#first-model-linear-model-with-all-predictors",
    "title": "Machine Learning Models Exercise",
    "section": "First Model: Linear model with all predictors",
    "text": "First Model: Linear model with all predictors\n\n# Set seed \nset.seed(rngseed)\n\n# Linear regression model\nlinear_model &lt;- linear_reg() %&gt;% set_engine(\"lm\")\n\n# Fitted model\nall_model &lt;- linear_model %&gt;% fit(Y ~., data = eng_data)\n\n# Define the outcome variable (Y) and predictors (all other variables)\noutcome &lt;- \"Y\"\npredictors &lt;- setdiff(names(eng_data), outcome)\n\n# Create a recipe for preprocessing\ndata_recipe &lt;- recipe(formula = Y ~., data = eng_data) %&gt;%\n  step_dummy(all_nominal(), -all_outcomes()) %&gt;%\n  step_normalize(all_predictors())\n\n# Linear workflow \n\nlinear_wf &lt;- workflow() %&gt;%\n  add_recipe(data_recipe) %&gt;%\n  add_model(linear_model)"
  },
  {
    "objectID": "ml-models-exercise/ml-models-exercise.html#second-model-lasso-regression",
    "href": "ml-models-exercise/ml-models-exercise.html#second-model-lasso-regression",
    "title": "Machine Learning Models Exercise",
    "section": "Second Model: LASSO Regression",
    "text": "Second Model: LASSO Regression\n\n# LASSO regression model\nlasso_model &lt;- linear_reg(penalty = 0.1, mixture = 1) %&gt;%\n  set_engine(\"glmnet\")\n\n# LASSO workflow\nlasso_wf &lt;- workflow() %&gt;%\n  add_recipe(data_recipe) %&gt;%\n  add_model(lasso_model)"
  },
  {
    "objectID": "ml-models-exercise/ml-models-exercise.html#third-model-random-forest-rf",
    "href": "ml-models-exercise/ml-models-exercise.html#third-model-random-forest-rf",
    "title": "Machine Learning Models Exercise",
    "section": "Third Model: Random Forest (RF)",
    "text": "Third Model: Random Forest (RF)\n\n# Random Forest Model\nrf_model &lt;- rand_forest() %&gt;%\n  set_engine(\"ranger\", seed = rngseed) %&gt;%\n  set_mode(\"regression\")\n\n# Random Forest Workflow \nrf_workflow &lt;- workflow() %&gt;%\n  add_model(rf_model) %&gt;%\n  add_recipe(data_recipe)"
  },
  {
    "objectID": "ml-models-exercise/ml-models-exercise.html#fitting-all-three-models",
    "href": "ml-models-exercise/ml-models-exercise.html#fitting-all-three-models",
    "title": "Machine Learning Models Exercise",
    "section": "Fitting all three Models",
    "text": "Fitting all three Models\n\nall_fit &lt;- linear_wf %&gt;% #Linear Model Fit\n  fit(data = eng_data)\n\nlasso_fit &lt;- lasso_wf %&gt;% #LASSO Model Fit\n  fit(data = eng_data)\n\nrf_fit &lt;- rf_workflow %&gt;% #RF Model Fit\n  fit(data = eng_data)"
  },
  {
    "objectID": "ml-models-exercise/ml-models-exercise.html#make-predictions-for-each-model-and-calculate-rmse",
    "href": "ml-models-exercise/ml-models-exercise.html#make-predictions-for-each-model-and-calculate-rmse",
    "title": "Machine Learning Models Exercise",
    "section": "Make predictions for each model and calculate RMSE",
    "text": "Make predictions for each model and calculate RMSE\n\n# Predictions\nall_predictions &lt;- predict(all_fit, new_data = eng_data) \nlasso_predictions &lt;- predict(lasso_fit, new_data = eng_data)\nrf_predictions &lt;- predict(rf_fit, new_data = eng_data)\n\n# RMSE\nall_rmse &lt;- augment_all &lt;- augment(all_fit, eng_data) %&gt;%\n  select(Y, .pred) %&gt;%\n  rmse(truth = Y, .pred)\nlasso_rmse &lt;- augment_lasso &lt;- augment(lasso_fit, eng_data) %&gt;%\n  select(Y, .pred) %&gt;%\n  rmse(truth = Y, .pred)\nrf_rmse &lt;- augment_rf &lt;- augment(rf_fit, eng_data) %&gt;%\n  select(Y, .pred) %&gt;%\n  rmse(truth = Y, .pred)\n\n\n# Printing RMSE \nprint(paste(\"Linear Model RMSE:\", all_rmse))\n\n[1] \"Linear Model RMSE: rmse\"             \"Linear Model RMSE: standard\"        \n[3] \"Linear Model RMSE: 581.417690122579\"\n\nprint(paste(\"Lasso Model RMSE:\", lasso_rmse))\n\n[1] \"Lasso Model RMSE: rmse\"            \"Lasso Model RMSE: standard\"       \n[3] \"Lasso Model RMSE: 581.47084138887\"\n\nprint(paste(\"Random Forest RMSE:\", rf_rmse))\n\n[1] \"Random Forest RMSE: rmse\"            \n[2] \"Random Forest RMSE: standard\"        \n[3] \"Random Forest RMSE: 358.454080832261\"\n\n\nThe Linear Model and LASSO Model yielded similar RMSE results (581.42 & 581.47). This may have occurred due to our data set having a small number of predictors and these predictors showing low levels of multicollinearity (the predictors are not highly correlated). Since we are observing a low level of multicollinearity, the LASSO model may not eliminate predictors due to nonzero coefficients. The RF Model yielded an RMSE value of 357.97, rendering it the best performing model so far. This makes sense due to the fact that Random Forest Models are flexible and can adapt well to various types of data without requiring strict assumptions about the underlying data distribution. This flexibility allows them to perform well in a wide range of scenarios (non-linearity, overfitting, outliers, etc.)."
  },
  {
    "objectID": "ml-models-exercise/ml-models-exercise.html#observed-vs.-predicted-plots-for-each-of-the-models",
    "href": "ml-models-exercise/ml-models-exercise.html#observed-vs.-predicted-plots-for-each-of-the-models",
    "title": "Machine Learning Models Exercise",
    "section": "Observed vs. Predicted Plots for each of the models",
    "text": "Observed vs. Predicted Plots for each of the models\nI am now going to create observed vs. predicted plots for each model.\n\n# Plot observed versus predicted for the linear model\nlinear_plot &lt;- ggplot(data.frame(Observed = eng_data$Y, Predicted = all_predictions$.pred), aes(x = Observed, y = Predicted)) +\n  geom_point(color = \"blue\") +\n  geom_abline(intercept = 0, slope = 1, color = \"red\") +\n  labs(title = \"Observed vs Predicted - Linear Model\",\n       x = \"Observed\",\n       y = \"Predicted\")\n\n# Show the plot\nprint(linear_plot)\n\n\n\n\n\n\n\n# Plot observed versus predicted for the LASSO model\nlasso_plot &lt;- ggplot(data.frame(Observed = eng_data$Y, Predicted = lasso_predictions$.pred), aes(x = Observed, y = Predicted)) +\n  geom_point(color = \"green\") +\n  geom_abline(intercept = 0, slope = 1, color = \"red\") +\n  labs(title = \"Observed vs Predicted - LASSO Model\",\n       x = \"Observed\",\n       y = \"Predicted\")\n\n# Show the plot\nprint(lasso_plot)\n\n\n\n\n\n\n\n# Plot observed versus predicted for the random forest model\nrf_plot &lt;- ggplot(data.frame(Observed = eng_data$Y, Predicted = rf_predictions$.pred), aes(x = Observed, y = Predicted)) +\n  geom_point(color = \"purple\") +\n  geom_abline(intercept = 0, slope = 1, color = \"red\") +\n  labs(title = \"Observed vs Predicted - Random Forest Model\",\n       x = \"Observed\",\n       y = \"Predicted\")\n\n# Show the plot\nprint(rf_plot)\n\n\n\n\n\n\n\n\nWe can see from these plots that once again, the Random Forest Model performed the best when visualizing observed vs. predicted values. The points on the RF Model plot are closest to the abline, indicating a higher level of accuracy than the Linear and LASSO models. This is on par with what we have seen with the previously calculated RMSE values."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "",
    "text": "Zane contributed to this exercise on Saturday 1/20\nThis uses MS Word as output format. See here for more information. You can switch to other formats, like html or pdf. See the Quarto documentation for other formats."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#description-of-data-and-data-source",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#description-of-data-and-data-source",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "2.1 Description of data and data source",
    "text": "2.1 Description of data and data source\nThe original data file was stored under exampledata.xls and contained three variables: height, weight, and gender. Two new variables, age and smoking_status were added into the table and codebook into the file exampledata2.xls."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#questionshypotheses-to-be-addressed",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#questionshypotheses-to-be-addressed",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "2.2 Questions/Hypotheses to be addressed",
    "text": "2.2 Questions/Hypotheses to be addressed\nI wanted to determine whether there were relationships between age and height, as well as height and smoking status. To do this, I constructed a scatterplot, boxplot, and linear regression model."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-import-and-cleaning",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-import-and-cleaning",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "3.1 Data import and cleaning",
    "text": "3.1 Data import and cleaning\n\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata2.rds\")\n\n#load data. \nmydata &lt;- readRDS(data_location)"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#statistical-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#statistical-analysis",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "3.2 Statistical analysis",
    "text": "3.2 Statistical analysis"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#exploratorydescriptive-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#exploratorydescriptive-analysis",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "4.1 Exploratory/Descriptive analysis",
    "text": "4.1 Exploratory/Descriptive analysis\nTable 1 shows a summary of the data.\nNote the loading of the data providing a relative path using the ../../ notation. (Two dots means a folder up). You never want to specify an absolute path like C:\\ahandel\\myproject\\results\\ because if you share this with someone, it won’t work for them since they don’t have that path. You can also use the here R package to create paths. See examples of that below. I recommend the here package, but I’m showing the other approach here just in case you encounter it.\n\n\n\n\nTable 1: Data summary table.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_type\nskim_variable\nn_missing\ncomplete_rate\nfactor.ordered\nfactor.n_unique\nfactor.top_counts\nnumeric.mean\nnumeric.sd\nnumeric.p0\nnumeric.p25\nnumeric.p50\nnumeric.p75\nnumeric.p100\nnumeric.hist\n\n\n\n\nfactor\nGender\n0\n1\nFALSE\n3\nM: 4, F: 3, O: 2\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\nnumeric\nHeight\n0\n1\nNA\nNA\nNA\n165.66667\n15.97655\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nnumeric\nWeight\n0\n1\nNA\nNA\nNA\n70.11111\n21.24526\n45\n55\n70\n80\n110\n▇▂▃▂▂"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#basic-statistical-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#basic-statistical-analysis",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "4.2 Basic statistical analysis",
    "text": "4.2 Basic statistical analysis\nFigure 1 shows a scatterplot figure produced by one of the R scripts.\n\n\n\n\n\n\n\n\nFigure 1: Height and weight stratified by gender.\n\n\n\n\n\nBoxplot of Smoking Status & Height\n\np5 &lt;- mydata |&gt;\n  ggplot2::ggplot() +\n  ggplot2::aes(x = Smoking_Status, y = Height) +\n  ggplot2::geom_boxplot()\n\nplot(p5)\n\n\n\n\n\n\n\nfigure_file = here::here(\n  \"starter-analysis-exercise\",\n  \"results\",\n  \"figures\",\n  \"height-smoking-stratified.png\"\n)\nggplot2::ggsave(filename = figure_file, plot = p5) \n\nSaving 7 x 5 in image\n\n\nThe boxplot indicates that individuals who report smoking are, on average, slightly taller than those who did not report smoking.\nScatterplot of Height and Age\n\np6 &lt;- mydata |&gt;\n  ggplot2::ggplot() +\n  ggplot2::aes(x = Age, y = Height) +\n  ggplot2::geom_point()\n\nplot(p6)\n\n\n\n\n\n\n\nfigure_file = here::here(\n  \"starter-analysis-exercise\",\n  \"results\",\n  \"figures\",\n  \"height-age-stratified.png\"\n)\nggplot2::ggsave(filename = figure_file, plot = p6) \n\nSaving 7 x 5 in image\n\n\nThere is no apparent association between age and height."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#full-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#full-analysis",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "4.3 Full analysis",
    "text": "4.3 Full analysis\nExample Table 2 shows a summary of a linear model fit.\n\n\n\n\nTable 2: Linear model fit table.\n\n\n\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n149.2726967\n23.3823360\n6.3839942\n0.0013962\n\n\nWeight\n0.2623972\n0.3512436\n0.7470519\n0.4886517\n\n\nGenderM\n-2.1244913\n15.5488953\n-0.1366329\n0.8966520\n\n\nGenderO\n-4.7644739\n19.0114155\n-0.2506112\n0.8120871\n\n\n\n\n\n\n\n\nModel of Height ~ Smoking_Status + Age\n\n#### Third model fit\n# fit linear model using height as outcome, smoking status and age as predictor\nlmfit3 &lt;- lm(Height ~ Smoking_Status + Age, mydata)\n\n#place results from fit into a data frame with the tidy function\nlmtable3 &lt;- broom::tidy(lmfit3)\n\n#look at fit results\nprint(lmtable3)\n\n# A tibble: 3 × 5\n  term              estimate std.error statistic  p.value\n  &lt;chr&gt;                &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)        185.       15.8      11.7   0.000305\n2 Smoking_StatusYes    5.11      9.05      0.565 0.602   \n3 Age                 -0.455     0.310    -1.46  0.217   \n\n#save fit results table \n\ntable_file3 = here(\"starter-analysis-exercise\", \"results\", \"tables-files\", \"resulttable3.rds\")\n\nThe linear regression model with height as the outcome and smoking_status and age as predictors yieled no statistically significant results suggesting there is not enough evidence that smoking_status and age are indicative of height. This contrasts the preliminary analysis of the boxplot that suggested there may be a positive association between height and smoking_status."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#summary-and-interpretation",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#summary-and-interpretation",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "5.1 Summary and Interpretation",
    "text": "5.1 Summary and Interpretation\nOverall, there is no statistically significant evidence to suggest that smoking_status and age have any association with height, weight, or gender."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#strengths-and-limitations",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#strengths-and-limitations",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "5.2 Strengths and Limitations",
    "text": "5.2 Strengths and Limitations\nOne limitation of this analysis involves the two added variables: smoking_status and age. These variables were arbitrarily added for the sake of performing introductory exploratory data analysis, and not to answer any pressing research questions."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#conclusions",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#conclusions",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "5.3 Conclusions",
    "text": "5.3 Conclusions\nThere is no evidence to suggest there are any significant associations between height, gender, weight, smoking status, or age.\nThis paper (Leek & Peng, 2015) discusses types of analyses.\nThese papers (McKay, Ebell, Billings, et al., 2020; McKay, Ebell, Dale, Shen, & Handel, 2020) are good examples of papers published using a fully reproducible setup similar to the one shown in this template.\nNote that this cited reference will show up at the end of the document, the reference formatting is determined by the CSL file specified in the YAML header. Many more style files for almost any journal are available. You also specify the location of your bibtex reference file in the YAML. You can call your reference file anything you like, I just used the generic word references.bib but giving it a more descriptive name is probably better."
  },
  {
    "objectID": "starter-analysis-exercise/code/readme.html",
    "href": "starter-analysis-exercise/code/readme.html",
    "title": "EMMA HARDIN-PARKER: DATA ANALYSIS PORTFOLIO",
    "section": "",
    "text": "Place your various R or Quarto files in the appropriate folders.\nYou can either have fewer large scripts, or multiple scripts that do only specific actions. Those can be R or Quarto files. In either case, document the scripts and what goes on in them so well that someone else (including future you) can easily figure out what is happening.\nThe scripts should load the appropriate data (e.g. raw or processed), perform actions, and save results (e.g. processed data, figures, computed values) in the appropriate folders. Document somewhere what inputs each script takes and where output is placed.\nIf scripts need to be run in a specific order, document this. Either as comments in the script, or in a separate text file such as this readme file. Ideally of course in both locations.\nDepending on your specific project, you might want to have further folders/sub-folders."
  },
  {
    "objectID": "starter-analysis-exercise/code/eda-code/eda.html",
    "href": "starter-analysis-exercise/code/eda-code/eda.html",
    "title": "An example exploratory analysis script",
    "section": "",
    "text": "This Quarto file loads the cleaned data and does some exploring.\nI’m only showing it the way where the code is included in the file. As described in the processing_code materials, I currently prefer the approach of having R code in a separate file and pulling it in.\nBut I already had this written and haven’t yet re-done it that way. Feel free to redo and send a pull request on GitHub :)\nAgain, it is largely a matter of preference and what makes the most sense to decide if one wants to have code inside Quarto files, or as separate R files. And sometimes, an R script with enough comments is good enough and one doesn’t need a Quarto file.\nAlso note that while here I split cleaning and exploring, this is iterative. You saw that as part of the processing, we already had to explore the data somewhat to understand how to clean it. In general, as you explore, you’ll find things that need cleaning. As you clean, you can explore more. Therefore, at times it might make more sense to combine the cleaning and exploring code parts into a single R or Quarto file. Or split things in any other logical way.\nAs part of the exploratory analysis, you should produce plots or tables or other summary quantities for the most interesting/important quantities in your data. Depending on the total number of variables in your dataset, explore all or some of the others. Figures produced here might be histograms or density plots, correlation plots, etc. Tables might summarize your data.\nStart by exploring one variable at a time. Then continue by creating plots or tables of the outcome(s) of interest and the predictor/exposure/input variables you are most interested in. If your dataset is small, you can do that for all variables.\nPlots produced here can be scatterplots, boxplots, violinplots, etc. Tables can be simple 2x2 tables or larger ones.\n\nSetup\n\n#load needed packages. make sure they are installed.\nlibrary(here) #for data loading/saving\n\nhere() starts at /Users/ehardinparker/Desktop/Completed/CPH_Spring24/BIOS8060E/emmahardinparker-MADA-portfolio\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(skimr)\nlibrary(ggplot2)\n\nLoad the data.\n\n#Path to data. Note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata.rds\")\n#load data\nmydata &lt;- readRDS(data_location)\n\n\n\nData exploration through tables\nShowing a bit of code to produce and save a summary table.\n\nsummary_df = skimr::skim(mydata)\nprint(summary_df)\n\n── Data Summary ────────────────────────\n                           Values\nName                       mydata\nNumber of rows             9     \nNumber of columns          3     \n_______________________          \nColumn type frequency:           \n  factor                   1     \n  numeric                  2     \n________________________         \nGroup variables            None  \n\n── Variable type: factor ───────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate ordered n_unique top_counts      \n1 Gender                0             1 FALSE          3 M: 4, F: 3, O: 2\n\n── Variable type: numeric ──────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate  mean   sd  p0 p25 p50 p75 p100 hist \n1 Height                0             1 166.  16.0 133 156 166 178  183 ▂▁▃▃▇\n2 Weight                0             1  70.1 21.2  45  55  70  80  110 ▇▂▃▂▂\n\n# save to file\nsummarytable_file = here(\"starter-analysis-exercise\",\"results\", \"tables-files\", \"summarytable.rds\")\nsaveRDS(summary_df, file = summarytable_file)\n\nWe are saving the results to the results/tables folder. Structure the folders inside results such that they make sense for your specific analysis. Provide enough documentation that someone can understand what you are doing and what goes where. readme.md files inside each folder are a good idea.\n\n\nData exploration through figures\nHistogram plots for the continuous outcomes.\nHeight first.\n\np1 &lt;- mydata %&gt;% ggplot(aes(x=Height)) + geom_histogram() \nplot(p1)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-distribution.png\")\nggsave(filename = figure_file, plot=p1) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow weights.\n\np2 &lt;- mydata %&gt;% ggplot(aes(x=Weight)) + geom_histogram() \nplot(p2)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"weight-distribution.png\")\nggsave(filename = figure_file, plot=p2) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow height as function of weight.\n\np3 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight)) + geom_point() + geom_smooth(method='lm')\nplot(p3)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight.png\")\nggsave(filename = figure_file, plot=p3) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nOnce more height as function of weight, stratified by gender. Note that there is so little data, it’s a bit silly. But we’ll plot it anyway.\n\np4 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight, color = Gender)) + geom_point() + geom_smooth(method='lm')\nplot(p4)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\n\n\nWarning in max(ids, na.rm = TRUE): no non-missing arguments to max; returning\n-Inf\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight-stratified.png\")\nggsave(filename = figure_file, plot=p4) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\nWarning in qt((1 - level)/2, df): no non-missing arguments to max; returning\n-Inf\n\n\n\n\nNotes\nFor your own explorations, tables and figures can be “quick and dirty”. As long as you can see what’s going on, there is no need to polish them. That’s in contrast to figures you’ll produce for your final products (paper, report, presentation, website, etc.). Those should look as nice, polished and easy to understand as possible."
  },
  {
    "objectID": "starter-analysis-exercise/code/processing-code/processingfile.html",
    "href": "starter-analysis-exercise/code/processing-code/processingfile.html",
    "title": "An example cleaning script",
    "section": "",
    "text": "Processing script\nThis Quarto file contains a mix of code and explanatory text to illustrate a simple data processing/cleaning setup.\n\n\nSetup\nLoad needed packages. make sure they are installed.\n\nlibrary(readxl) #for loading Excel files\nlibrary(dplyr) #for data processing/cleaning\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr) #for data processing/cleaning\nlibrary(skimr) #for nice visualization of data \nlibrary(here) #to set paths\n\nhere() starts at /Users/ehardinparker/Desktop/Completed/CPH_Spring24/BIOS8060E/emmahardinparker-MADA-portfolio\n\n\n\n\nData loading\nNote that for functions that come from specific packages (instead of base R), I often specify both package and function like so: package::function() that’s not required one could just call the function specifying the package makes it clearer where the function “lives”, but it adds typing. You can do it either way.\n\n# path to data\n# note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"raw-data\",\"exampledata.xlsx\")\nrawdata &lt;- readxl::read_excel(data_location)\n\n\n\nCheck data\nFirst we can look at the codebook\n\ncodebook &lt;- readxl::read_excel(data_location, sheet =\"Codebook\")\nprint(codebook)\n\n# A tibble: 3 × 3\n  `Variable Name` `Variable Definition`                 `Allowed Values`      \n  &lt;chr&gt;           &lt;chr&gt;                                 &lt;chr&gt;                 \n1 Height          height in centimeters                 numeric value &gt;0 or NA\n2 Weight          weight in kilograms                   numeric value &gt;0 or NA\n3 Gender          identified gender (male/female/other) M/F/O/NA              \n\n\nSeveral ways of looking at the data\n\ndplyr::glimpse(rawdata)\n\nRows: 14\nColumns: 3\n$ Height &lt;chr&gt; \"180\", \"175\", \"sixty\", \"178\", \"192\", \"6\", \"156\", \"166\", \"155\", …\n$ Weight &lt;dbl&gt; 80, 70, 60, 76, 90, 55, 90, 110, 54, 7000, NA, 45, 55, 50\n$ Gender &lt;chr&gt; \"M\", \"O\", \"F\", \"F\", \"NA\", \"F\", \"O\", \"M\", \"N\", \"M\", \"F\", \"F\", \"M…\n\nsummary(rawdata)\n\n    Height              Weight          Gender         \n Length:14          Min.   :  45.0   Length:14         \n Class :character   1st Qu.:  55.0   Class :character  \n Mode  :character   Median :  70.0   Mode  :character  \n                    Mean   : 602.7                     \n                    3rd Qu.:  90.0                     \n                    Max.   :7000.0                     \n                    NA's   :1                          \n\nhead(rawdata)\n\n# A tibble: 6 × 3\n  Height Weight Gender\n  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt; \n1 180        80 M     \n2 175        70 O     \n3 sixty      60 F     \n4 178        76 F     \n5 192        90 NA    \n6 6          55 F     \n\nskimr::skim(rawdata)\n\n\nData summary\n\n\nName\nrawdata\n\n\nNumber of rows\n14\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n1\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nHeight\n0\n1\n1\n5\n0\n13\n0\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nWeight\n1\n0.93\n602.69\n1922.25\n45\n55\n70\n90\n7000\n▇▁▁▁▁\n\n\n\n\n\n\n\nCleaning\nBy inspecting the data as done above, we find some problems that need addressing:\nFirst, there is an entry for height which says “sixty” instead of a number. Does that mean it should be a numeric 60? It somehow doesn’t make sense since the weight is 60kg, which can’t happen for a 60cm person (a baby). Since we don’t know how to fix this, we might decide to remove the person. This “sixty” entry also turned all Height entries into characters instead of numeric. That conversion to character also means that our summary function isn’t very meaningful. So let’s fix that first.\n\nd1 &lt;- rawdata %&gt;% dplyr::filter( Height != \"sixty\" ) %&gt;% \n                  dplyr::mutate(Height = as.numeric(Height))\nskimr::skim(d1)\n\n\nData summary\n\n\nName\nd1\n\n\nNumber of rows\n13\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n151.62\n46.46\n6\n154.00\n165\n175\n192\n▁▁▁▂▇\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\n\n\nhist(d1$Height)\n\n\n\n\n\n\n\n\nNow we see that there is one person with a height of 6. That could be a typo, or someone mistakenly entered their height in feet. Since we unfortunately don’t know, we might need to remove this person, which we’ll do here.\n\nd2 &lt;- d1 %&gt;% dplyr::mutate( Height = replace(Height, Height==\"6\",round(6*30.48,0)) )\nskimr::skim(d2)\n\n\nData summary\n\n\nName\nd2\n\n\nNumber of rows\n13\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n165.23\n16.52\n133\n155.00\n166\n178\n192\n▂▇▆▆▃\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\n\n\n\nHeight values seem ok now.\nNow let’s look at the Weight variable. There is a person with weight of 7000, which is impossible, and one person with missing weight. To be able to analyze the data, we’ll remove those individuals as well.\n\nd3 &lt;- d2 %&gt;%  dplyr::filter(Weight != 7000) %&gt;% tidyr::drop_na()\nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\n\n\n\nNow checking the Gender variable. Gender should be a categorical/factor variable but is loaded as character. We can fix that with simple base R code to mix things up.\n\nd3$Gender &lt;- as.factor(d3$Gender)  \nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n5\nM: 4, F: 3, O: 2, N: 1\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\n\n\n\nNow we see that there is another NA, but it’s not NA from R, instead it was loaded as character and is now considered as a category. Well proceed here by removing that individual with that NA entry. Since this keeps an empty category for Gender, I’m also using droplevels() to get rid of it.\n\nd4 &lt;- d3 %&gt;% dplyr::filter( !(Gender %in% c(\"NA\",\"N\")) ) %&gt;% droplevels()\nskimr::skim(d4)\n\n\nData summary\n\n\nName\nd4\n\n\nNumber of rows\n9\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n3\nM: 4, F: 3, O: 2\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n165.67\n15.98\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nWeight\n0\n1\n70.11\n21.25\n45\n55\n70\n80\n110\n▇▂▃▂▂\n\n\n\n\n\nAll done, data is clean now.\nLet’s assign at the end to some final variable, this makes it easier to add further cleaning steps above.\n\nprocesseddata &lt;- d4\n\n\n\nSave data\nFinally, we save the clean data as RDS file. I suggest you save your processed and cleaned data as RDS or RDA/Rdata files. This preserves coding like factors, characters, numeric, etc. If you save as CSV, that information would get lost. However, CSV is better for sharing with others since it’s plain text. If you do CSV, you might want to write down somewhere what each variable is.\nSee here for some suggestions on how to store your processed data: http://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata\n\nsave_data_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata.rds\")\nsaveRDS(processeddata, file = save_data_location)\n\nNote the use of the here package and here command to specify a path relative to the main project directory, that is the folder that contains the .Rproj file. Always use this approach instead of hard-coding file paths that only exist on your computer.\n\n\nNotes\nRemoving anyone observation with “faulty” or missing data is one approach. It’s often not the best. based on your question and your analysis approach, you might want to do cleaning differently (e.g. keep observations with some missing information)."
  },
  {
    "objectID": "starter-analysis-exercise/code/processing-code/processingfile2.html",
    "href": "starter-analysis-exercise/code/processing-code/processingfile2.html",
    "title": "An example cleaning script",
    "section": "",
    "text": "Processing script\nThis Quarto file contains a mix of code and explanatory text to illustrate a simple data processing/cleaning setup.\n\n\nSetup\nLoad needed packages. make sure they are installed.\n\nlibrary(readxl) #for loading Excel files\nlibrary(dplyr) #for data processing/cleaning\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr) #for data processing/cleaning\nlibrary(skimr) #for nice visualization of data \nlibrary(here) #to set paths\n\nhere() starts at /Users/ehardinparker/Desktop/Completed/CPH_Spring24/BIOS8060E/emmahardinparker-MADA-portfolio\n\n\n\n\nData loading\nNote that for functions that come from specific packages (instead of base R), I often specify both package and function like so: package::function() that’s not required one could just call the function specifying the package makes it clearer where the function “lives”, but it adds typing. You can do it either way.\n\n# path to data\n# note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\n  \"starter-analysis-exercise\",\n  \"data\",\n  \"raw-data\",\n  \"exampledata2.xlsx\"\n)\nrawdata &lt;- readxl::read_excel(data_location)\n\n\n\nCheck data\nFirst we can look at the codebook\n\ncodebook &lt;- readxl::read_excel(data_location, sheet =\"Codebook\")\nprint(codebook)\n\n# A tibble: 5 × 3\n  `Variable Name` `Variable Definition`                 `Allowed Values`       \n  &lt;chr&gt;           &lt;chr&gt;                                 &lt;chr&gt;                  \n1 Height          height in centimeters                 numeric value &gt;0 or NA \n2 Weight          weight in kilograms                   numeric value &gt;0 or NA \n3 Gender          identified gender (male/female/other) M/F/O/NA               \n4 Smoking Status  self reported smoking status          Yes/No/NA              \n5 Age             identified age                        numeric value &gt;18 or NA\n\n\nSeveral ways of looking at the data\n\ndplyr::glimpse(rawdata)\n\nRows: 14\nColumns: 5\n$ Height           &lt;chr&gt; \"180\", \"175\", \"sixty\", \"178\", \"192\", \"6\", \"156\", \"166…\n$ Weight           &lt;dbl&gt; 80, 70, 60, 76, 90, 55, 90, 110, 54, 7000, NA, 45, 55…\n$ Gender           &lt;chr&gt; \"M\", \"O\", \"F\", \"F\", \"NA\", \"F\", \"O\", \"M\", \"N\", \"M\", \"F…\n$ `Smoking Status` &lt;chr&gt; \"Yes\", \"No\", \"NA\", \"NA\", \"No\", \"Yes\", \"Yes\", \"Yes\", \"…\n$ Age              &lt;dbl&gt; 28, 32, 47, 24, 35, 51, 64, 43, 39, 49, 54, 22, 30, 57\n\nsummary(rawdata)\n\n    Height              Weight          Gender          Smoking Status    \n Length:14          Min.   :  45.0   Length:14          Length:14         \n Class :character   1st Qu.:  55.0   Class :character   Class :character  \n Mode  :character   Median :  70.0   Mode  :character   Mode  :character  \n                    Mean   : 602.7                                        \n                    3rd Qu.:  90.0                                        \n                    Max.   :7000.0                                        \n                    NA's   :1                                             \n      Age       \n Min.   :22.00  \n 1st Qu.:30.50  \n Median :41.00  \n Mean   :41.07  \n 3rd Qu.:50.50  \n Max.   :64.00  \n                \n\nhead(rawdata)\n\n# A tibble: 6 × 5\n  Height Weight Gender `Smoking Status`   Age\n  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;            &lt;dbl&gt;\n1 180        80 M      Yes                 28\n2 175        70 O      No                  32\n3 sixty      60 F      NA                  47\n4 178        76 F      NA                  24\n5 192        90 NA     No                  35\n6 6          55 F      Yes                 51\n\nskimr::skim(rawdata)\n\n\nData summary\n\n\nName\nrawdata\n\n\nNumber of rows\n14\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n3\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nHeight\n0\n1\n1\n5\n0\n13\n0\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nSmoking Status\n0\n1\n2\n3\n0\n3\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nWeight\n1\n0.93\n602.69\n1922.25\n45\n55.0\n70\n90.0\n7000\n▇▁▁▁▁\n\n\nAge\n0\n1.00\n41.07\n13.06\n22\n30.5\n41\n50.5\n64\n▇▃▆▆▃\n\n\n\n\n\n\n\nCleaning\nBy inspecting the data as done above, we find some problems that need addressing:\nFirst, there is an entry for height which says “sixty” instead of a number. Does that mean it should be a numeric 60? It somehow doesn’t make sense since the weight is 60kg, which can’t happen for a 60cm person (a baby). Since we don’t know how to fix this, we might decide to remove the person. This “sixty” entry also turned all Height entries into characters instead of numeric. That conversion to character also means that our summary function isn’t very meaningful. So let’s fix that first.\n\nd1 &lt;- rawdata %&gt;% dplyr::filter( Height != \"sixty\" ) %&gt;% \n                  dplyr::mutate(Height = as.numeric(Height))\nskimr::skim(d1)\n\n\nData summary\n\n\nName\nd1\n\n\nNumber of rows\n13\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nSmoking Status\n0\n1\n2\n3\n0\n3\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n151.62\n46.46\n6\n154.00\n165\n175\n192\n▁▁▁▂▇\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\nAge\n0\n1.00\n40.62\n13.48\n22\n30.00\n39\n51\n64\n▇▃▃▆▃\n\n\n\n\nhist(d1$Height)\n\n\n\n\n\n\n\n\nNow we see that there is one person with a height of 6. That could be a typo, or someone mistakenly entered their height in feet. Since we unfortunately don’t know, we might need to remove this person, which we’ll do here.\n\nd2 &lt;- d1 %&gt;% dplyr::mutate( Height = replace(Height, Height==\"6\",round(6*30.48,0)) )\nskimr::skim(d2)\n\n\nData summary\n\n\nName\nd2\n\n\nNumber of rows\n13\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nSmoking Status\n0\n1\n2\n3\n0\n3\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n165.23\n16.52\n133\n155.00\n166\n178\n192\n▂▇▆▆▃\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\nAge\n0\n1.00\n40.62\n13.48\n22\n30.00\n39\n51\n64\n▇▃▃▆▃\n\n\n\n\n\nHeight values seem ok now.\nNow let’s look at the Weight variable. There is a person with weight of 7000, which is impossible, and one person with missing weight. To be able to analyze the data, we’ll remove those individuals as well.\n\nd3 &lt;- d2 %&gt;%  dplyr::filter(Weight != 7000) %&gt;% tidyr::drop_na()\nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nSmoking Status\n0\n1\n2\n3\n0\n3\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\nAge\n0\n1\n38.64\n13.74\n22\n29.0\n35\n47\n64\n▇▃▃▂▃\n\n\n\n\n\nNow checking the Gender variable. Gender should be a categorical/factor variable but is loaded as character. We can fix that with simple base R code to mix things up.\n\nd3$Gender &lt;- as.factor(d3$Gender)  \nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nfactor\n1\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nSmoking Status\n0\n1\n2\n3\n0\n3\n0\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n5\nM: 4, F: 3, O: 2, N: 1\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\nAge\n0\n1\n38.64\n13.74\n22\n29.0\n35\n47\n64\n▇▃▃▂▃\n\n\n\n\n\nNow we see that there is another NA, but it’s not NA from R, instead it was loaded as character and is now considered as a category. Well proceed here by removing that individual with that NA entry. Since this keeps an empty category for Gender, I’m also using droplevels() to get rid of it.\n\nd4 &lt;- d3 %&gt;% dplyr::filter( !(Gender %in% c(\"NA\",\"N\")) ) %&gt;% droplevels()\nskimr::skim(d4)\n\n\nData summary\n\n\nName\nd4\n\n\nNumber of rows\n9\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nfactor\n1\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nSmoking Status\n0\n1\n2\n3\n0\n3\n0\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n3\nM: 4, F: 3, O: 2\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n165.67\n15.98\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nWeight\n0\n1\n70.11\n21.25\n45\n55\n70\n80\n110\n▇▂▃▂▂\n\n\nAge\n0\n1\n39.00\n15.31\n22\n28\n32\n51\n64\n▇▂▂▂▃\n\n\n\n\n\nNext we need to check the two new variables, we’ll start with Smoking Status. It has some NA values that are character strings instead of actual NAs, so we’ll need to code those as true missing values. Then we’ll make it a factor variable as well. We’ll also replace the space in the variable name with an underscore to make it syntactically valid.\n\nd5 &lt;- d4 |&gt;\n  dplyr::rename(Smoking_Status = `Smoking Status`) |&gt;\n  dplyr::mutate(\n    # We know what the allowed values are from the codebook. So any values\n    # that are not in the level set will become NA.\n    Smoking_Status = factor(Smoking_Status, levels = c(\"No\", \"Yes\"))\n  )\n\nFinally we need to check the Age value. It looks correct, so we are done.\nAll done, data is clean now.\nLet’s assign at the end to some final variable, this makes it easier to add further cleaning steps above.\n\nprocesseddata &lt;- d5\n\n\n\nSave data\nFinally, we save the clean data as RDS file. I suggest you save your processed and cleaned data as RDS or RDA/Rdata files. This preserves coding like factors, characters, numeric, etc. If you save as CSV, that information would get lost. However, CSV is better for sharing with others since it’s plain text. If you do CSV, you might want to write down somewhere what each variable is.\nSee here for some suggestions on how to store your processed data: http://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata\n\nsave_data_location &lt;- here::here(\n  \"starter-analysis-exercise\",\n  \"data\",\n  \"processed-data\",\n  \"processeddata2.rds\"\n)\nsaveRDS(processeddata, file = save_data_location)\n\nNote the use of the here package and here command to specify a path relative to the main project directory, that is the folder that contains the .Rproj file. Always use this approach instead of hard-coding file paths that only exist on your computer.\n\n\nNotes\nRemoving anyone observation with “faulty” or missing data is one approach. It’s often not the best. based on your question and your analysis approach, you might want to do cleaning differently (e.g. keep observations with some missing information)."
  },
  {
    "objectID": "starter-analysis-exercise/results/readme.html",
    "href": "starter-analysis-exercise/results/readme.html",
    "title": "EMMA HARDIN-PARKER: DATA ANALYSIS PORTFOLIO",
    "section": "",
    "text": "This folder contains results produced by the code, such as figures and tables.\nDepending on the size and type of your project, you can either place it all in a single folder or create sub-folders. For instance you could create a folder for figures, another for tables. Or you could create a sub-folder for dataset 1, another for dataset 2. Or you could have a subfolder for exploratory analysis, another for final analysis. The options are endless, choose whatever makes sense for your project. For this template, there is just a a single folder, but having sub-folders is often a good idea."
  },
  {
    "objectID": "starter-analysis-exercise/data/raw-data/readme.html",
    "href": "starter-analysis-exercise/data/raw-data/readme.html",
    "title": "EMMA HARDIN-PARKER: DATA ANALYSIS PORTFOLIO",
    "section": "",
    "text": "This folder contains a simple made-up data-set in an Excel file.\nIt contains the variables Height, Weight and Gender of a few imaginary individuals.\nThe dataset purposefully contains some faulty entries that need to be cleaned.\nGenerally, any dataset should contain some meta-data explaining what each variable in the dataset is. (This is often called a Codebook.) For this simple example, the codebook is given as a second sheet in the Excel file.\nThis raw data-set should generally not be edited by hand. It should instead be loaded and processed/cleaned using code."
  }
]